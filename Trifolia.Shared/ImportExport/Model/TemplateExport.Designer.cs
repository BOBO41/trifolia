// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.0.0.433
//    <NameSpace>Trifolia.Shared.ImportExport.Model</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><DataMemberNameArg>OnlyIfDifferent</DataMemberNameArg><DataMemberOnXmlIgnore>False</DataMemberOnXmlIgnore><CodeBaseTag>Net45</CodeBaseTag><InitializeFields>All</InitializeFields><GenerateUnusedComplexTypes>False</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>False</GenerateUnusedSimpleTypes><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>True</OrderXMLAttrib><EnableLazyLoading>False</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><AutomaticProperties>True</AutomaticProperties><PropNameSpecified>Default</PropNameSpecified><PrivateFieldName>StartWithUnderscore</PrivateFieldName><PrivateFieldNamePrefix></PrivateFieldNamePrefix><EnableRestriction>False</EnableRestriction><RestrictionMaxLenght>False</RestrictionMaxLenght><RestrictionRegEx>False</RestrictionRegEx><RestrictionRange>False</RestrictionRange><ValidateProperty>False</ValidateProperty><ClassNamePrefix></ClassNamePrefix><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><EnableAppInfoSettings>False</EnableAppInfoSettings><EnableExternalSchemasCache>False</EnableExternalSchemasCache><EnableDebug>False</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>False</ExcludeImportedTypes><ExpandNesteadAttributeGroup>False</ExpandNesteadAttributeGroup><CleanupCode>False</CleanupCode><EnableXmlSerialization>True</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>False</EnableEncoding><EnableXMLIndent>False</EnableXMLIndent><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><sspNullable>True</sspNullable><sspString>True</sspString><sspCollection>True</sspCollection><sspComplexType>True</sspComplexType><sspSimpleType>True</sspSimpleType><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings></CustomUsings><AttributesToExlude></AttributesToExlude>
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace Trifolia.Shared.ImportExport.Model
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Xml;
    using System.Collections.Generic;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.lantanagroup.com")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://www.lantanagroup.com", IsNullable = false)]
    public partial class Trifolia
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("Template", Order = 0)]
        public List<TrifoliaTemplate> Template { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("ImplementationGuide", Order = 1)]
        public List<TrifoliaImplementationGuide> ImplementationGuide { get; set; }

        public Trifolia()
        {
            this.ImplementationGuide = new List<TrifoliaImplementationGuide>();
            this.Template = new List<TrifoliaTemplate>();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(Trifolia));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Template should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTemplate()
        {
            return Template != null && Template.Count > 0;
        }

        /// <summary>
        /// Test whether ImplementationGuide should be serialized
        /// </summary>
        public virtual bool ShouldSerializeImplementationGuide()
        {
            return ImplementationGuide != null && ImplementationGuide.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Trifolia object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Trifolia object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Trifolia object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Trifolia obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Trifolia);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Trifolia obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static Trifolia Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((Trifolia)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Trifolia Deserialize(System.IO.Stream s)
        {
            return ((Trifolia)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Trifolia object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Trifolia object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Trifolia object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Trifolia obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Trifolia);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Trifolia obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Trifolia LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.lantanagroup.com")]
    public partial class TrifoliaTemplate
    {

        private bool _shouldSerializeisOpen;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TrifoliaTemplateImplementationGuide ImplementationGuide { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public TrifoliaTemplatePreviousVersion PreviousVersion { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string Description { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string Notes { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("Constraint", Order = 4)]
        public List<ConstraintType> Constraint { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("Extension", Order = 5)]
        public List<TrifoliaTemplateExtension> Extension { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string identifier { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string implementationGuideType { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string templateType { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string title { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string bookmark { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string context { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string contextType { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool isOpen { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isOpenSpecified { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string impliedTemplateOid { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string organizationName { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string publishStatus { get; set; }

        public TrifoliaTemplate()
        {
            this.Extension = new List<TrifoliaTemplateExtension>();
            this.Constraint = new List<ConstraintType>();
            this.PreviousVersion = new TrifoliaTemplatePreviousVersion();
            this.ImplementationGuide = new TrifoliaTemplateImplementationGuide();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TrifoliaTemplate));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Constraint should be serialized
        /// </summary>
        public virtual bool ShouldSerializeConstraint()
        {
            return Constraint != null && Constraint.Count > 0;
        }

        /// <summary>
        /// Test whether Extension should be serialized
        /// </summary>
        public virtual bool ShouldSerializeExtension()
        {
            return Extension != null && Extension.Count > 0;
        }

        /// <summary>
        /// Test whether isOpen should be serialized
        /// </summary>
        public virtual bool ShouldSerializeisOpen()
        {
            if (_shouldSerializeisOpen)
            {
                return true;
            }
            return (isOpen != default(bool));
        }

        /// <summary>
        /// Test whether ImplementationGuide should be serialized
        /// </summary>
        public virtual bool ShouldSerializeImplementationGuide()
        {
            return (ImplementationGuide != null);
        }

        /// <summary>
        /// Test whether PreviousVersion should be serialized
        /// </summary>
        public virtual bool ShouldSerializePreviousVersion()
        {
            return (PreviousVersion != null);
        }

        /// <summary>
        /// Test whether Description should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDescription()
        {
            return !string.IsNullOrEmpty(Description);
        }

        /// <summary>
        /// Test whether Notes should be serialized
        /// </summary>
        public virtual bool ShouldSerializeNotes()
        {
            return !string.IsNullOrEmpty(Notes);
        }

        /// <summary>
        /// Test whether identifier should be serialized
        /// </summary>
        public virtual bool ShouldSerializeidentifier()
        {
            return !string.IsNullOrEmpty(identifier);
        }

        /// <summary>
        /// Test whether implementationGuideType should be serialized
        /// </summary>
        public virtual bool ShouldSerializeimplementationGuideType()
        {
            return !string.IsNullOrEmpty(implementationGuideType);
        }

        /// <summary>
        /// Test whether templateType should be serialized
        /// </summary>
        public virtual bool ShouldSerializetemplateType()
        {
            return !string.IsNullOrEmpty(templateType);
        }

        /// <summary>
        /// Test whether title should be serialized
        /// </summary>
        public virtual bool ShouldSerializetitle()
        {
            return !string.IsNullOrEmpty(title);
        }

        /// <summary>
        /// Test whether bookmark should be serialized
        /// </summary>
        public virtual bool ShouldSerializebookmark()
        {
            return !string.IsNullOrEmpty(bookmark);
        }

        /// <summary>
        /// Test whether context should be serialized
        /// </summary>
        public virtual bool ShouldSerializecontext()
        {
            return !string.IsNullOrEmpty(context);
        }

        /// <summary>
        /// Test whether contextType should be serialized
        /// </summary>
        public virtual bool ShouldSerializecontextType()
        {
            return !string.IsNullOrEmpty(contextType);
        }

        /// <summary>
        /// Test whether impliedTemplateOid should be serialized
        /// </summary>
        public virtual bool ShouldSerializeimpliedTemplateOid()
        {
            return !string.IsNullOrEmpty(impliedTemplateOid);
        }

        /// <summary>
        /// Test whether organizationName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeorganizationName()
        {
            return !string.IsNullOrEmpty(organizationName);
        }

        /// <summary>
        /// Test whether publishStatus should be serialized
        /// </summary>
        public virtual bool ShouldSerializepublishStatus()
        {
            return !string.IsNullOrEmpty(publishStatus);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TrifoliaTemplate object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TrifoliaTemplate object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TrifoliaTemplate object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TrifoliaTemplate obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TrifoliaTemplate);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TrifoliaTemplate obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TrifoliaTemplate Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TrifoliaTemplate)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TrifoliaTemplate Deserialize(System.IO.Stream s)
        {
            return ((TrifoliaTemplate)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TrifoliaTemplate object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TrifoliaTemplate object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TrifoliaTemplate object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TrifoliaTemplate obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TrifoliaTemplate);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TrifoliaTemplate obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TrifoliaTemplate LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.lantanagroup.com")]
    public partial class TrifoliaTemplateImplementationGuide
    {

        private bool _shouldSerializeversion;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(1)]
        public int version { get; set; }

        public TrifoliaTemplateImplementationGuide()
        {
            this.version = 1;
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TrifoliaTemplateImplementationGuide));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether version should be serialized
        /// </summary>
        public virtual bool ShouldSerializeversion()
        {
            if (_shouldSerializeversion)
            {
                return true;
            }
            return (version != default(int));
        }

        /// <summary>
        /// Test whether name should be serialized
        /// </summary>
        public virtual bool ShouldSerializename()
        {
            return !string.IsNullOrEmpty(name);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TrifoliaTemplateImplementationGuide object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TrifoliaTemplateImplementationGuide object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TrifoliaTemplateImplementationGuide object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TrifoliaTemplateImplementationGuide obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TrifoliaTemplateImplementationGuide);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TrifoliaTemplateImplementationGuide obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TrifoliaTemplateImplementationGuide Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TrifoliaTemplateImplementationGuide)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TrifoliaTemplateImplementationGuide Deserialize(System.IO.Stream s)
        {
            return ((TrifoliaTemplateImplementationGuide)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TrifoliaTemplateImplementationGuide object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TrifoliaTemplateImplementationGuide object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TrifoliaTemplateImplementationGuide object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TrifoliaTemplateImplementationGuide obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TrifoliaTemplateImplementationGuide);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TrifoliaTemplateImplementationGuide obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TrifoliaTemplateImplementationGuide LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.lantanagroup.com")]
    public partial class ConstraintType
    {

        private bool _shouldSerializeisVerbose;

        private bool _shouldSerializeisSchRooted;

        private bool _shouldSerializeisInheritable;

        private bool _shouldSerializeisStatic;

        private bool _shouldSerializeisPrimitive;

        private bool _shouldSerializeisBranchIdentifier;

        private bool _shouldSerializeisBranch;

        private bool _shouldSerializeconformance;

        private bool _shouldSerializenumber;

        private bool _shouldSerializeItem;

        private System.Nullable<ConstraintTypeConformance> _conformance;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("SingleValueCode", typeof(ConstraintTypeSingleValueCode), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("ValueSet", typeof(ConstraintTypeValueSet), Order = 0)]
        public object Item { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public ConstraintTypeCodeSystem CodeSystem { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string SchematronTest { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string NarrativeText { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string Description { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public string Label { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("Constraint", Order = 6)]
        public List<ConstraintType> Constraint { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int number { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool numberSpecified { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string context { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cardinality { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string dataType { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string containedTemplateOid { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string containedTemplateType { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool isBranch { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool isBranchIdentifier { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool isPrimitive { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool isStatic { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool isInheritable { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool isSchRooted { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool isVerbose { get; set; }

        public ConstraintType()
        {
            this.Constraint = new List<ConstraintType>();
            this.CodeSystem = new ConstraintTypeCodeSystem();
            this.isBranch = false;
            this.isBranchIdentifier = false;
            this.isPrimitive = false;
            this.isStatic = false;
            this.isInheritable = true;
            this.isSchRooted = false;
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ConstraintTypeConformance conformance
        {
            get
            {
                if (this._conformance.HasValue)
                {
                    return this._conformance.Value;
                }
                else
                {
                    return default(ConstraintTypeConformance);
                }
            }
            set
            {
                this._conformance = value;
                _shouldSerializeconformance = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool conformanceSpecified
        {
            get
            {
                return this._conformance.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._conformance = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ConstraintType));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Constraint should be serialized
        /// </summary>
        public virtual bool ShouldSerializeConstraint()
        {
            return Constraint != null && Constraint.Count > 0;
        }

        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            if (_shouldSerializeItem)
            {
                return true;
            }
            return (Item != default(object));
        }

        /// <summary>
        /// Test whether number should be serialized
        /// </summary>
        public virtual bool ShouldSerializenumber()
        {
            if (_shouldSerializenumber)
            {
                return true;
            }
            return (number != default(int));
        }

        /// <summary>
        /// Test whether conformance should be serialized
        /// </summary>
        public virtual bool ShouldSerializeconformance()
        {
            if (_shouldSerializeconformance)
            {
                return true;
            }
            return (conformance != default(ConstraintTypeConformance));
        }

        /// <summary>
        /// Test whether isBranch should be serialized
        /// </summary>
        public virtual bool ShouldSerializeisBranch()
        {
            if (_shouldSerializeisBranch)
            {
                return true;
            }
            return (isBranch != default(bool));
        }

        /// <summary>
        /// Test whether isBranchIdentifier should be serialized
        /// </summary>
        public virtual bool ShouldSerializeisBranchIdentifier()
        {
            if (_shouldSerializeisBranchIdentifier)
            {
                return true;
            }
            return (isBranchIdentifier != default(bool));
        }

        /// <summary>
        /// Test whether isPrimitive should be serialized
        /// </summary>
        public virtual bool ShouldSerializeisPrimitive()
        {
            if (_shouldSerializeisPrimitive)
            {
                return true;
            }
            return (isPrimitive != default(bool));
        }

        /// <summary>
        /// Test whether isStatic should be serialized
        /// </summary>
        public virtual bool ShouldSerializeisStatic()
        {
            if (_shouldSerializeisStatic)
            {
                return true;
            }
            return (isStatic != default(bool));
        }

        /// <summary>
        /// Test whether isInheritable should be serialized
        /// </summary>
        public virtual bool ShouldSerializeisInheritable()
        {
            if (_shouldSerializeisInheritable)
            {
                return true;
            }
            return (isInheritable != default(bool));
        }

        /// <summary>
        /// Test whether isSchRooted should be serialized
        /// </summary>
        public virtual bool ShouldSerializeisSchRooted()
        {
            if (_shouldSerializeisSchRooted)
            {
                return true;
            }
            return (isSchRooted != default(bool));
        }

        /// <summary>
        /// Test whether isVerbose should be serialized
        /// </summary>
        public virtual bool ShouldSerializeisVerbose()
        {
            if (_shouldSerializeisVerbose)
            {
                return true;
            }
            return (isVerbose != default(bool));
        }

        /// <summary>
        /// Test whether CodeSystem should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCodeSystem()
        {
            return (CodeSystem != null);
        }

        /// <summary>
        /// Test whether SchematronTest should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSchematronTest()
        {
            return !string.IsNullOrEmpty(SchematronTest);
        }

        /// <summary>
        /// Test whether NarrativeText should be serialized
        /// </summary>
        public virtual bool ShouldSerializeNarrativeText()
        {
            return !string.IsNullOrEmpty(NarrativeText);
        }

        /// <summary>
        /// Test whether Description should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDescription()
        {
            return !string.IsNullOrEmpty(Description);
        }

        /// <summary>
        /// Test whether Label should be serialized
        /// </summary>
        public virtual bool ShouldSerializeLabel()
        {
            return !string.IsNullOrEmpty(Label);
        }

        /// <summary>
        /// Test whether context should be serialized
        /// </summary>
        public virtual bool ShouldSerializecontext()
        {
            return !string.IsNullOrEmpty(context);
        }

        /// <summary>
        /// Test whether cardinality should be serialized
        /// </summary>
        public virtual bool ShouldSerializecardinality()
        {
            return !string.IsNullOrEmpty(cardinality);
        }

        /// <summary>
        /// Test whether dataType should be serialized
        /// </summary>
        public virtual bool ShouldSerializedataType()
        {
            return !string.IsNullOrEmpty(dataType);
        }

        /// <summary>
        /// Test whether containedTemplateOid should be serialized
        /// </summary>
        public virtual bool ShouldSerializecontainedTemplateOid()
        {
            return !string.IsNullOrEmpty(containedTemplateOid);
        }

        /// <summary>
        /// Test whether containedTemplateType should be serialized
        /// </summary>
        public virtual bool ShouldSerializecontainedTemplateType()
        {
            return !string.IsNullOrEmpty(containedTemplateType);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ConstraintType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ConstraintType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ConstraintType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ConstraintType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ConstraintType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ConstraintType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ConstraintType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ConstraintType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ConstraintType Deserialize(System.IO.Stream s)
        {
            return ((ConstraintType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ConstraintType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ConstraintType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ConstraintType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ConstraintType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ConstraintType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ConstraintType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ConstraintType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.lantanagroup.com")]
    public partial class ConstraintTypeSingleValueCode
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string code { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string displayName { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ConstraintTypeSingleValueCode));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether code should be serialized
        /// </summary>
        public virtual bool ShouldSerializecode()
        {
            return !string.IsNullOrEmpty(code);
        }

        /// <summary>
        /// Test whether displayName should be serialized
        /// </summary>
        public virtual bool ShouldSerializedisplayName()
        {
            return !string.IsNullOrEmpty(displayName);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ConstraintTypeSingleValueCode object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ConstraintTypeSingleValueCode object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ConstraintTypeSingleValueCode object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ConstraintTypeSingleValueCode obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ConstraintTypeSingleValueCode);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ConstraintTypeSingleValueCode obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ConstraintTypeSingleValueCode Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ConstraintTypeSingleValueCode)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ConstraintTypeSingleValueCode Deserialize(System.IO.Stream s)
        {
            return ((ConstraintTypeSingleValueCode)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ConstraintTypeSingleValueCode object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ConstraintTypeSingleValueCode object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ConstraintTypeSingleValueCode object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ConstraintTypeSingleValueCode obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ConstraintTypeSingleValueCode);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ConstraintTypeSingleValueCode obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ConstraintTypeSingleValueCode LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.lantanagroup.com")]
    public partial class ConstraintTypeValueSet
    {

        private bool _shouldSerializedate;

        private bool _shouldSerializeisStatic;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string Description { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string oid { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool isStatic { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime date { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dateSpecified { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ConstraintTypeValueSet));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether isStatic should be serialized
        /// </summary>
        public virtual bool ShouldSerializeisStatic()
        {
            if (_shouldSerializeisStatic)
            {
                return true;
            }
            return (isStatic != default(bool));
        }

        /// <summary>
        /// Test whether date should be serialized
        /// </summary>
        public virtual bool ShouldSerializedate()
        {
            if (_shouldSerializedate)
            {
                return true;
            }
            return (date != default(System.DateTime));
        }

        /// <summary>
        /// Test whether Description should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDescription()
        {
            return !string.IsNullOrEmpty(Description);
        }

        /// <summary>
        /// Test whether oid should be serialized
        /// </summary>
        public virtual bool ShouldSerializeoid()
        {
            return !string.IsNullOrEmpty(oid);
        }

        /// <summary>
        /// Test whether name should be serialized
        /// </summary>
        public virtual bool ShouldSerializename()
        {
            return !string.IsNullOrEmpty(name);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ConstraintTypeValueSet object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ConstraintTypeValueSet object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ConstraintTypeValueSet object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ConstraintTypeValueSet obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ConstraintTypeValueSet);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ConstraintTypeValueSet obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ConstraintTypeValueSet Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ConstraintTypeValueSet)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ConstraintTypeValueSet Deserialize(System.IO.Stream s)
        {
            return ((ConstraintTypeValueSet)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ConstraintTypeValueSet object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ConstraintTypeValueSet object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ConstraintTypeValueSet object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ConstraintTypeValueSet obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ConstraintTypeValueSet);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ConstraintTypeValueSet obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ConstraintTypeValueSet LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.lantanagroup.com")]
    public partial class ConstraintTypeCodeSystem
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string oid { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ConstraintTypeCodeSystem));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether oid should be serialized
        /// </summary>
        public virtual bool ShouldSerializeoid()
        {
            return !string.IsNullOrEmpty(oid);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ConstraintTypeCodeSystem object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ConstraintTypeCodeSystem object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ConstraintTypeCodeSystem object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ConstraintTypeCodeSystem obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ConstraintTypeCodeSystem);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ConstraintTypeCodeSystem obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ConstraintTypeCodeSystem Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ConstraintTypeCodeSystem)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ConstraintTypeCodeSystem Deserialize(System.IO.Stream s)
        {
            return ((ConstraintTypeCodeSystem)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ConstraintTypeCodeSystem object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ConstraintTypeCodeSystem object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ConstraintTypeCodeSystem object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ConstraintTypeCodeSystem obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ConstraintTypeCodeSystem);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ConstraintTypeCodeSystem obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ConstraintTypeCodeSystem LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.lantanagroup.com")]
    public enum ConstraintTypeConformance
    {

        /// <remarks/>
        SHALL,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("SHALL NOT")]
        SHALLNOT,

        /// <remarks/>
        SHOULD,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("SHOULD NOT")]
        SHOULDNOT,

        /// <remarks/>
        MAY,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MAY NOT")]
        MAYNOT,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.lantanagroup.com")]
    public partial class TrifoliaTemplatePreviousVersion
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string identifier { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TrifoliaTemplatePreviousVersion));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether name should be serialized
        /// </summary>
        public virtual bool ShouldSerializename()
        {
            return !string.IsNullOrEmpty(name);
        }

        /// <summary>
        /// Test whether identifier should be serialized
        /// </summary>
        public virtual bool ShouldSerializeidentifier()
        {
            return !string.IsNullOrEmpty(identifier);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TrifoliaTemplatePreviousVersion object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TrifoliaTemplatePreviousVersion object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TrifoliaTemplatePreviousVersion object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TrifoliaTemplatePreviousVersion obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TrifoliaTemplatePreviousVersion);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TrifoliaTemplatePreviousVersion obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TrifoliaTemplatePreviousVersion Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TrifoliaTemplatePreviousVersion)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TrifoliaTemplatePreviousVersion Deserialize(System.IO.Stream s)
        {
            return ((TrifoliaTemplatePreviousVersion)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TrifoliaTemplatePreviousVersion object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TrifoliaTemplatePreviousVersion object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TrifoliaTemplatePreviousVersion object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TrifoliaTemplatePreviousVersion obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TrifoliaTemplatePreviousVersion);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TrifoliaTemplatePreviousVersion obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TrifoliaTemplatePreviousVersion LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.lantanagroup.com")]
    public partial class TrifoliaTemplateExtension
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string identifier { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string type { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string value { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TrifoliaTemplateExtension));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether identifier should be serialized
        /// </summary>
        public virtual bool ShouldSerializeidentifier()
        {
            return !string.IsNullOrEmpty(identifier);
        }

        /// <summary>
        /// Test whether type should be serialized
        /// </summary>
        public virtual bool ShouldSerializetype()
        {
            return !string.IsNullOrEmpty(type);
        }

        /// <summary>
        /// Test whether value should be serialized
        /// </summary>
        public virtual bool ShouldSerializevalue()
        {
            return !string.IsNullOrEmpty(value);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TrifoliaTemplateExtension object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TrifoliaTemplateExtension object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TrifoliaTemplateExtension object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TrifoliaTemplateExtension obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TrifoliaTemplateExtension);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TrifoliaTemplateExtension obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TrifoliaTemplateExtension Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TrifoliaTemplateExtension)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TrifoliaTemplateExtension Deserialize(System.IO.Stream s)
        {
            return ((TrifoliaTemplateExtension)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TrifoliaTemplateExtension object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TrifoliaTemplateExtension object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TrifoliaTemplateExtension object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TrifoliaTemplateExtension obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TrifoliaTemplateExtension);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TrifoliaTemplateExtension obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TrifoliaTemplateExtension LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.lantanagroup.com")]
    public partial class TrifoliaImplementationGuide
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string WebDescription { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string WebReadmeOverview { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public TrifoliaImplementationGuidePreviousVersion PreviousVersion { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("CustomTemplateType", Order = 3)]
        public List<TrifoliaImplementationGuideCustomTemplateType> CustomTemplateType { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("CardinalityDisplay", Order = 4)]
        public List<TrifoliaImplementationGuideCardinalityDisplay> CardinalityDisplay { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("CustomSchematron", Order = 5)]
        public List<TrifoliaImplementationGuideCustomSchematron> CustomSchematron { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public TrifoliaImplementationGuideVolume1 Volume1 { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string displayName { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string webDisplayName { get; set; }

        public TrifoliaImplementationGuide()
        {
            this.Volume1 = new TrifoliaImplementationGuideVolume1();
            this.CustomSchematron = new List<TrifoliaImplementationGuideCustomSchematron>();
            this.CardinalityDisplay = new List<TrifoliaImplementationGuideCardinalityDisplay>();
            this.CustomTemplateType = new List<TrifoliaImplementationGuideCustomTemplateType>();
            this.PreviousVersion = new TrifoliaImplementationGuidePreviousVersion();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TrifoliaImplementationGuide));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether CustomTemplateType should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCustomTemplateType()
        {
            return CustomTemplateType != null && CustomTemplateType.Count > 0;
        }

        /// <summary>
        /// Test whether CardinalityDisplay should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCardinalityDisplay()
        {
            return CardinalityDisplay != null && CardinalityDisplay.Count > 0;
        }

        /// <summary>
        /// Test whether CustomSchematron should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCustomSchematron()
        {
            return CustomSchematron != null && CustomSchematron.Count > 0;
        }

        /// <summary>
        /// Test whether PreviousVersion should be serialized
        /// </summary>
        public virtual bool ShouldSerializePreviousVersion()
        {
            return (PreviousVersion != null);
        }

        /// <summary>
        /// Test whether Volume1 should be serialized
        /// </summary>
        public virtual bool ShouldSerializeVolume1()
        {
            return (Volume1 != null);
        }

        /// <summary>
        /// Test whether WebDescription should be serialized
        /// </summary>
        public virtual bool ShouldSerializeWebDescription()
        {
            return !string.IsNullOrEmpty(WebDescription);
        }

        /// <summary>
        /// Test whether WebReadmeOverview should be serialized
        /// </summary>
        public virtual bool ShouldSerializeWebReadmeOverview()
        {
            return !string.IsNullOrEmpty(WebReadmeOverview);
        }

        /// <summary>
        /// Test whether name should be serialized
        /// </summary>
        public virtual bool ShouldSerializename()
        {
            return !string.IsNullOrEmpty(name);
        }

        /// <summary>
        /// Test whether displayName should be serialized
        /// </summary>
        public virtual bool ShouldSerializedisplayName()
        {
            return !string.IsNullOrEmpty(displayName);
        }

        /// <summary>
        /// Test whether webDisplayName should be serialized
        /// </summary>
        public virtual bool ShouldSerializewebDisplayName()
        {
            return !string.IsNullOrEmpty(webDisplayName);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TrifoliaImplementationGuide object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TrifoliaImplementationGuide object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TrifoliaImplementationGuide object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TrifoliaImplementationGuide obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TrifoliaImplementationGuide);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TrifoliaImplementationGuide obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TrifoliaImplementationGuide Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TrifoliaImplementationGuide)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TrifoliaImplementationGuide Deserialize(System.IO.Stream s)
        {
            return ((TrifoliaImplementationGuide)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TrifoliaImplementationGuide object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TrifoliaImplementationGuide object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TrifoliaImplementationGuide object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TrifoliaImplementationGuide obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TrifoliaImplementationGuide);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TrifoliaImplementationGuide obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TrifoliaImplementationGuide LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.lantanagroup.com")]
    public partial class TrifoliaImplementationGuidePreviousVersion
    {

        private bool _shouldSerializenumber;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int number { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TrifoliaImplementationGuidePreviousVersion));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether number should be serialized
        /// </summary>
        public virtual bool ShouldSerializenumber()
        {
            if (_shouldSerializenumber)
            {
                return true;
            }
            return (number != default(int));
        }

        /// <summary>
        /// Test whether name should be serialized
        /// </summary>
        public virtual bool ShouldSerializename()
        {
            return !string.IsNullOrEmpty(name);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TrifoliaImplementationGuidePreviousVersion object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TrifoliaImplementationGuidePreviousVersion object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TrifoliaImplementationGuidePreviousVersion object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TrifoliaImplementationGuidePreviousVersion obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TrifoliaImplementationGuidePreviousVersion);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TrifoliaImplementationGuidePreviousVersion obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TrifoliaImplementationGuidePreviousVersion Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TrifoliaImplementationGuidePreviousVersion)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TrifoliaImplementationGuidePreviousVersion Deserialize(System.IO.Stream s)
        {
            return ((TrifoliaImplementationGuidePreviousVersion)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TrifoliaImplementationGuidePreviousVersion object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TrifoliaImplementationGuidePreviousVersion object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TrifoliaImplementationGuidePreviousVersion object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TrifoliaImplementationGuidePreviousVersion obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TrifoliaImplementationGuidePreviousVersion);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TrifoliaImplementationGuidePreviousVersion obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TrifoliaImplementationGuidePreviousVersion LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.lantanagroup.com")]
    public partial class TrifoliaImplementationGuideCustomTemplateType
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string CustomName { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string Description { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string templateTypeName { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TrifoliaImplementationGuideCustomTemplateType));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether CustomName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCustomName()
        {
            return !string.IsNullOrEmpty(CustomName);
        }

        /// <summary>
        /// Test whether Description should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDescription()
        {
            return !string.IsNullOrEmpty(Description);
        }

        /// <summary>
        /// Test whether templateTypeName should be serialized
        /// </summary>
        public virtual bool ShouldSerializetemplateTypeName()
        {
            return !string.IsNullOrEmpty(templateTypeName);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TrifoliaImplementationGuideCustomTemplateType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TrifoliaImplementationGuideCustomTemplateType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TrifoliaImplementationGuideCustomTemplateType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TrifoliaImplementationGuideCustomTemplateType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TrifoliaImplementationGuideCustomTemplateType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TrifoliaImplementationGuideCustomTemplateType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TrifoliaImplementationGuideCustomTemplateType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TrifoliaImplementationGuideCustomTemplateType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TrifoliaImplementationGuideCustomTemplateType Deserialize(System.IO.Stream s)
        {
            return ((TrifoliaImplementationGuideCustomTemplateType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TrifoliaImplementationGuideCustomTemplateType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TrifoliaImplementationGuideCustomTemplateType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TrifoliaImplementationGuideCustomTemplateType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TrifoliaImplementationGuideCustomTemplateType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TrifoliaImplementationGuideCustomTemplateType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TrifoliaImplementationGuideCustomTemplateType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TrifoliaImplementationGuideCustomTemplateType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.lantanagroup.com")]
    public partial class TrifoliaImplementationGuideCardinalityDisplay
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cardinality { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string display { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TrifoliaImplementationGuideCardinalityDisplay));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether cardinality should be serialized
        /// </summary>
        public virtual bool ShouldSerializecardinality()
        {
            return !string.IsNullOrEmpty(cardinality);
        }

        /// <summary>
        /// Test whether display should be serialized
        /// </summary>
        public virtual bool ShouldSerializedisplay()
        {
            return !string.IsNullOrEmpty(display);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TrifoliaImplementationGuideCardinalityDisplay object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TrifoliaImplementationGuideCardinalityDisplay object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TrifoliaImplementationGuideCardinalityDisplay object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TrifoliaImplementationGuideCardinalityDisplay obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TrifoliaImplementationGuideCardinalityDisplay);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TrifoliaImplementationGuideCardinalityDisplay obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TrifoliaImplementationGuideCardinalityDisplay Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TrifoliaImplementationGuideCardinalityDisplay)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TrifoliaImplementationGuideCardinalityDisplay Deserialize(System.IO.Stream s)
        {
            return ((TrifoliaImplementationGuideCardinalityDisplay)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TrifoliaImplementationGuideCardinalityDisplay object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TrifoliaImplementationGuideCardinalityDisplay object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TrifoliaImplementationGuideCardinalityDisplay object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TrifoliaImplementationGuideCardinalityDisplay obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TrifoliaImplementationGuideCardinalityDisplay);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TrifoliaImplementationGuideCardinalityDisplay obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TrifoliaImplementationGuideCardinalityDisplay LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.lantanagroup.com")]
    public partial class TrifoliaImplementationGuideCustomSchematron
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string Rule { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string phase { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string patternId { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TrifoliaImplementationGuideCustomSchematron));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Rule should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRule()
        {
            return !string.IsNullOrEmpty(Rule);
        }

        /// <summary>
        /// Test whether phase should be serialized
        /// </summary>
        public virtual bool ShouldSerializephase()
        {
            return !string.IsNullOrEmpty(phase);
        }

        /// <summary>
        /// Test whether patternId should be serialized
        /// </summary>
        public virtual bool ShouldSerializepatternId()
        {
            return !string.IsNullOrEmpty(patternId);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TrifoliaImplementationGuideCustomSchematron object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TrifoliaImplementationGuideCustomSchematron object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TrifoliaImplementationGuideCustomSchematron object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TrifoliaImplementationGuideCustomSchematron obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TrifoliaImplementationGuideCustomSchematron);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TrifoliaImplementationGuideCustomSchematron obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TrifoliaImplementationGuideCustomSchematron Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TrifoliaImplementationGuideCustomSchematron)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TrifoliaImplementationGuideCustomSchematron Deserialize(System.IO.Stream s)
        {
            return ((TrifoliaImplementationGuideCustomSchematron)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TrifoliaImplementationGuideCustomSchematron object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TrifoliaImplementationGuideCustomSchematron object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TrifoliaImplementationGuideCustomSchematron object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TrifoliaImplementationGuideCustomSchematron obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TrifoliaImplementationGuideCustomSchematron);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TrifoliaImplementationGuideCustomSchematron obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TrifoliaImplementationGuideCustomSchematron LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.lantanagroup.com")]
    public partial class TrifoliaImplementationGuideVolume1
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("Html", typeof(string), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("Section", typeof(TrifoliaImplementationGuideVolume1Section), Order = 0)]
        public List<object> Items { get; set; }

        public TrifoliaImplementationGuideVolume1()
        {
            this.Items = new List<object>();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TrifoliaImplementationGuideVolume1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Items should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItems()
        {
            return Items != null && Items.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TrifoliaImplementationGuideVolume1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TrifoliaImplementationGuideVolume1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TrifoliaImplementationGuideVolume1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TrifoliaImplementationGuideVolume1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TrifoliaImplementationGuideVolume1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TrifoliaImplementationGuideVolume1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TrifoliaImplementationGuideVolume1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TrifoliaImplementationGuideVolume1)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TrifoliaImplementationGuideVolume1 Deserialize(System.IO.Stream s)
        {
            return ((TrifoliaImplementationGuideVolume1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TrifoliaImplementationGuideVolume1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TrifoliaImplementationGuideVolume1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TrifoliaImplementationGuideVolume1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TrifoliaImplementationGuideVolume1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TrifoliaImplementationGuideVolume1);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TrifoliaImplementationGuideVolume1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TrifoliaImplementationGuideVolume1 LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.lantanagroup.com")]
    public partial class TrifoliaImplementationGuideVolume1Section
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TrifoliaImplementationGuideVolume1SectionHeading Heading { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string Content { get; set; }

        public TrifoliaImplementationGuideVolume1Section()
        {
            this.Heading = new TrifoliaImplementationGuideVolume1SectionHeading();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TrifoliaImplementationGuideVolume1Section));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Heading should be serialized
        /// </summary>
        public virtual bool ShouldSerializeHeading()
        {
            return (Heading != null);
        }

        /// <summary>
        /// Test whether Content should be serialized
        /// </summary>
        public virtual bool ShouldSerializeContent()
        {
            return !string.IsNullOrEmpty(Content);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TrifoliaImplementationGuideVolume1Section object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TrifoliaImplementationGuideVolume1Section object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TrifoliaImplementationGuideVolume1Section object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TrifoliaImplementationGuideVolume1Section obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TrifoliaImplementationGuideVolume1Section);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TrifoliaImplementationGuideVolume1Section obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TrifoliaImplementationGuideVolume1Section Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TrifoliaImplementationGuideVolume1Section)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TrifoliaImplementationGuideVolume1Section Deserialize(System.IO.Stream s)
        {
            return ((TrifoliaImplementationGuideVolume1Section)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TrifoliaImplementationGuideVolume1Section object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TrifoliaImplementationGuideVolume1Section object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TrifoliaImplementationGuideVolume1Section object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TrifoliaImplementationGuideVolume1Section obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TrifoliaImplementationGuideVolume1Section);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TrifoliaImplementationGuideVolume1Section obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TrifoliaImplementationGuideVolume1Section LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.lantanagroup.com")]
    public partial class TrifoliaImplementationGuideVolume1SectionHeading
    {

        private bool _shouldSerializeLevel;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string Title { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public int Level { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TrifoliaImplementationGuideVolume1SectionHeading));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Level should be serialized
        /// </summary>
        public virtual bool ShouldSerializeLevel()
        {
            if (_shouldSerializeLevel)
            {
                return true;
            }
            return (Level != default(int));
        }

        /// <summary>
        /// Test whether Title should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTitle()
        {
            return !string.IsNullOrEmpty(Title);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TrifoliaImplementationGuideVolume1SectionHeading object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TrifoliaImplementationGuideVolume1SectionHeading object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TrifoliaImplementationGuideVolume1SectionHeading object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TrifoliaImplementationGuideVolume1SectionHeading obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TrifoliaImplementationGuideVolume1SectionHeading);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TrifoliaImplementationGuideVolume1SectionHeading obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TrifoliaImplementationGuideVolume1SectionHeading Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TrifoliaImplementationGuideVolume1SectionHeading)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TrifoliaImplementationGuideVolume1SectionHeading Deserialize(System.IO.Stream s)
        {
            return ((TrifoliaImplementationGuideVolume1SectionHeading)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TrifoliaImplementationGuideVolume1SectionHeading object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TrifoliaImplementationGuideVolume1SectionHeading object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TrifoliaImplementationGuideVolume1SectionHeading object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TrifoliaImplementationGuideVolume1SectionHeading obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TrifoliaImplementationGuideVolume1SectionHeading);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TrifoliaImplementationGuideVolume1SectionHeading obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TrifoliaImplementationGuideVolume1SectionHeading LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
}
#pragma warning restore
