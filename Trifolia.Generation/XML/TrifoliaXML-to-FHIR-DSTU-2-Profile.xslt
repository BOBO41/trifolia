<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2015r3sp1

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:fhir="http://hl7.org/fhir" xmlns:tbf="http://www.altova.com/MapForce/UDF/tbf" xmlns:user="http://www.altova.com/MapForce/UDF/user" xmlns:vmf="http://www.altova.com/MapForce/UDF/vmf" xmlns:ns0="http://www.lantanagroup.com" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:xml="http://www.w3.org/XML/1998/namespace" exclude-result-prefixes="tbf user vmf ns0 xs fn">
	<xsl:template name="tbf:tbf1_string">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@value">
			<xsl:attribute name="value" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf2_Extension">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@url">
			<xsl:attribute name="url" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:valueBoolean)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf3_boolean">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:valueInteger)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf4_integer">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:valueDecimal)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf5_decimal">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:valueBase64Binary)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf6_base64Binary">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:valueInstant)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf7_instant">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:valueString)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf1_string">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:valueUri)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf8_uri">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:valueDate)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf9_date">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:valueDateTime)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf10_dateTime">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:valueTime)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf11_time">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:valueCode)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf12_code">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:valueOid)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf13_oid">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:valueUuid)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf14_uuid">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:valueId)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf15_id">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:valueUnsignedInt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf16_unsignedInt">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:valuePositiveInt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf17_positiveInt">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:valueMarkdown)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf18_markdown">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:valueAnnotation)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf19_Annotation">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:valueAttachment)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf21_Attachment">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:valueIdentifier)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf22_Identifier">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:valueCodeableConcept)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf24_CodeableConcept">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:valueCoding)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf25_Coding">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:valueQuantity)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf27_Quantity">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:valueRange)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf29_Range">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:valuePeriod)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf26_Period">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:valueRatio)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf31_Ratio">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:valueReference)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf20_Reference">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:valueSampledData)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf32_SampledData">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:valueSignature)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf34_Signature">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:valueHumanName)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf35_HumanName">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:valueAddress)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf37_Address">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:valueContactPoint)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf40_ContactPoint">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:valueTiming)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf43_Timing">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:valueMeta)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf48_Meta">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf3_boolean">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@value">
			<xsl:attribute name="value" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf4_integer">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@value">
			<xsl:attribute name="value" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf5_decimal">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@value">
			<xsl:attribute name="value" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf6_base64Binary">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@value">
			<xsl:attribute name="value" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf7_instant">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@value">
			<xsl:attribute name="value" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf8_uri">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@value">
			<xsl:attribute name="value" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf9_date">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@value">
			<xsl:attribute name="value" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf10_dateTime">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@value">
			<xsl:attribute name="value" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf11_time">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@value">
			<xsl:attribute name="value" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf12_code">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@value">
			<xsl:attribute name="value" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf13_oid">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@value">
			<xsl:attribute name="value" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf14_uuid">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@value">
			<xsl:attribute name="value" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf15_id">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@value">
			<xsl:attribute name="value" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf16_unsignedInt">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@value">
			<xsl:attribute name="value" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf17_positiveInt">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@value">
			<xsl:attribute name="value" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf18_markdown">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@value">
			<xsl:attribute name="value" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf19_Annotation">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:authorReference)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf20_Reference">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:authorString)">
						<xsl:variable name="var1_resultof_tbf__string" as="node()*">
							<xsl:call-template name="tbf:tbf1_string">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var2_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var1_resultof_tbf__string"/>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:time)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf10_dateTime">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:text)">
						<xsl:variable name="var3_resultof_tbf__string" as="node()*">
							<xsl:call-template name="tbf:tbf1_string">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var4_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var3_resultof_tbf__string"/>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf20_Reference">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:reference)">
						<xsl:variable name="var1_resultof_tbf__string" as="node()*">
							<xsl:call-template name="tbf:tbf1_string">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var2_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var1_resultof_tbf__string"/>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:display)">
						<xsl:variable name="var3_resultof_tbf__string" as="node()*">
							<xsl:call-template name="tbf:tbf1_string">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var4_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var3_resultof_tbf__string"/>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf21_Attachment">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:contentType)">
						<xsl:variable name="var1_resultof_tbf___code" as="node()*">
							<xsl:call-template name="tbf:tbf12_code">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var2_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var1_resultof_tbf___code"/>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:language)">
						<xsl:variable name="var3_resultof_tbf___code" as="node()*">
							<xsl:call-template name="tbf:tbf12_code">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var4_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var3_resultof_tbf___code"/>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:data)">
						<xsl:variable name="var5_resultof_tbf__base__Binary" as="node()*">
							<xsl:call-template name="tbf:tbf6_base64Binary">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var6_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var5_resultof_tbf__base__Binary"/>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:url)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf8_uri">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:size)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf16_unsignedInt">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:hash)">
						<xsl:variable name="var7_resultof_tbf__base__Binary" as="node()*">
							<xsl:call-template name="tbf:tbf6_base64Binary">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var8_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var7_resultof_tbf__base__Binary"/>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:title)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf1_string">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:creation)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf10_dateTime">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf22_Identifier">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:use)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf23_IdentifierUse">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:type)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf24_CodeableConcept">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:system)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf8_uri">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:value)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf1_string">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:period)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf26_Period">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:assigner)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf20_Reference">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf23_IdentifierUse">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@value">
			<xsl:attribute name="value" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf24_CodeableConcept">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:coding)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf25_Coding">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:text)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf1_string">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf25_Coding">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:system)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf8_uri">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:version)">
						<xsl:variable name="var1_resultof_tbf__string" as="node()*">
							<xsl:call-template name="tbf:tbf1_string">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var2_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var1_resultof_tbf__string"/>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf12_code">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:display)">
						<xsl:variable name="var3_resultof_tbf__string" as="node()*">
							<xsl:call-template name="tbf:tbf1_string">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var4_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var3_resultof_tbf__string"/>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:userSelected)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf3_boolean">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf26_Period">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:start)">
						<xsl:variable name="var1_resultof_tbf___dateTime" as="node()*">
							<xsl:call-template name="tbf:tbf10_dateTime">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var2_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var1_resultof_tbf___dateTime"/>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:end)">
						<xsl:variable name="var3_resultof_tbf___dateTime" as="node()*">
							<xsl:call-template name="tbf:tbf10_dateTime">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var4_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var3_resultof_tbf___dateTime"/>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf27_Quantity">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:value)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf5_decimal">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:comparator)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf28_QuantityComparator">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:unit)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf1_string">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:system)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf8_uri">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf12_code">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf28_QuantityComparator">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@value">
			<xsl:attribute name="value" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf29_Range">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:low)">
						<xsl:variable name="var1_resultof_tbf___SimpleQuantity" as="node()*">
							<xsl:call-template name="tbf:tbf30_SimpleQuantity">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var2_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var1_resultof_tbf___SimpleQuantity"/>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:high)">
						<xsl:variable name="var3_resultof_tbf___SimpleQuantity" as="node()*">
							<xsl:call-template name="tbf:tbf30_SimpleQuantity">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var4_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var3_resultof_tbf___SimpleQuantity"/>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf30_SimpleQuantity">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:value)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf5_decimal">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:unit)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf1_string">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:system)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf8_uri">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf12_code">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf31_Ratio">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:numerator)">
						<xsl:variable name="var1_resultof_tbf___Quantity" as="node()*">
							<xsl:call-template name="tbf:tbf27_Quantity">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var2_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var1_resultof_tbf___Quantity"/>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:denominator)">
						<xsl:variable name="var3_resultof_tbf___Quantity" as="node()*">
							<xsl:call-template name="tbf:tbf27_Quantity">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var4_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var3_resultof_tbf___Quantity"/>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf32_SampledData">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:origin)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf30_SimpleQuantity">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:period)">
						<xsl:variable name="var1_resultof_tbf__decimal" as="node()*">
							<xsl:call-template name="tbf:tbf5_decimal">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var2_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var1_resultof_tbf__decimal"/>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:factor)">
						<xsl:variable name="var3_resultof_tbf__decimal" as="node()*">
							<xsl:call-template name="tbf:tbf5_decimal">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var4_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var3_resultof_tbf__decimal"/>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:lowerLimit)">
						<xsl:variable name="var5_resultof_tbf__decimal" as="node()*">
							<xsl:call-template name="tbf:tbf5_decimal">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var6_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var5_resultof_tbf__decimal"/>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:upperLimit)">
						<xsl:variable name="var7_resultof_tbf__decimal" as="node()*">
							<xsl:call-template name="tbf:tbf5_decimal">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var8_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var7_resultof_tbf__decimal"/>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:dimensions)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf17_positiveInt">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:data)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf33_SampledDataDataType">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf33_SampledDataDataType">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@value">
			<xsl:attribute name="value" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf34_Signature">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:type)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf25_Coding">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:when)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf7_instant">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:whoUri)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf8_uri">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:whoReference)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf20_Reference">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:contentType)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf12_code">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:blob)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf6_base64Binary">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf35_HumanName">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:use)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf36_NameUse">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:text)">
						<xsl:variable name="var1_resultof_tbf__string" as="node()*">
							<xsl:call-template name="tbf:tbf1_string">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var2_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var1_resultof_tbf__string"/>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:family)">
						<xsl:variable name="var3_resultof_tbf__string" as="node()*">
							<xsl:call-template name="tbf:tbf1_string">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var4_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var3_resultof_tbf__string"/>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:given)">
						<xsl:variable name="var5_resultof_tbf__string" as="node()*">
							<xsl:call-template name="tbf:tbf1_string">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var6_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var5_resultof_tbf__string"/>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:prefix)">
						<xsl:variable name="var7_resultof_tbf__string" as="node()*">
							<xsl:call-template name="tbf:tbf1_string">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var8_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var7_resultof_tbf__string"/>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:suffix)">
						<xsl:variable name="var9_resultof_tbf__string" as="node()*">
							<xsl:call-template name="tbf:tbf1_string">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var10_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var9_resultof_tbf__string"/>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:period)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf26_Period">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf36_NameUse">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@value">
			<xsl:attribute name="value" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf37_Address">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:use)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf38_AddressUse">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:type)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf39_AddressType">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:text)">
						<xsl:variable name="var1_resultof_tbf__string" as="node()*">
							<xsl:call-template name="tbf:tbf1_string">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var2_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var1_resultof_tbf__string"/>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:line)">
						<xsl:variable name="var3_resultof_tbf__string" as="node()*">
							<xsl:call-template name="tbf:tbf1_string">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var4_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var3_resultof_tbf__string"/>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:city)">
						<xsl:variable name="var5_resultof_tbf__string" as="node()*">
							<xsl:call-template name="tbf:tbf1_string">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var6_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var5_resultof_tbf__string"/>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:district)">
						<xsl:variable name="var7_resultof_tbf__string" as="node()*">
							<xsl:call-template name="tbf:tbf1_string">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var8_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var7_resultof_tbf__string"/>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:state)">
						<xsl:variable name="var9_resultof_tbf__string" as="node()*">
							<xsl:call-template name="tbf:tbf1_string">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var10_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var9_resultof_tbf__string"/>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:postalCode)">
						<xsl:variable name="var11_resultof_tbf__string" as="node()*">
							<xsl:call-template name="tbf:tbf1_string">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var12_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var11_resultof_tbf__string"/>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:country)">
						<xsl:variable name="var13_resultof_tbf__string" as="node()*">
							<xsl:call-template name="tbf:tbf1_string">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var14_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var13_resultof_tbf__string"/>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:period)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf26_Period">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf38_AddressUse">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@value">
			<xsl:attribute name="value" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf39_AddressType">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@value">
			<xsl:attribute name="value" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf40_ContactPoint">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:system)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf41_ContactPointSystem">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:value)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf1_string">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:use)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf42_ContactPointUse">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:rank)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf17_positiveInt">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:period)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf26_Period">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf41_ContactPointSystem">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@value">
			<xsl:attribute name="value" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf42_ContactPointUse">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@value">
			<xsl:attribute name="value" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf43_Timing">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:event)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf10_dateTime">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:repeat)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf44_Timing_Repeat">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf24_CodeableConcept">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf44_Timing_Repeat">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:boundsQuantity)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf45_Duration">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:boundsRange)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf29_Range">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:boundsPeriod)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf26_Period">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:count)">
						<xsl:variable name="var1_resultof_tbf__integer" as="node()*">
							<xsl:call-template name="tbf:tbf4_integer">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var2_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var1_resultof_tbf__integer"/>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:duration)">
						<xsl:variable name="var3_resultof_tbf__decimal" as="node()*">
							<xsl:call-template name="tbf:tbf5_decimal">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var4_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var3_resultof_tbf__decimal"/>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:durationMax)">
						<xsl:variable name="var5_resultof_tbf__decimal" as="node()*">
							<xsl:call-template name="tbf:tbf5_decimal">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var6_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var5_resultof_tbf__decimal"/>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:durationUnits)">
						<xsl:variable name="var7_resultof_tbf___UnitsOfTime" as="node()*">
							<xsl:call-template name="tbf:tbf46_UnitsOfTime">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var8_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var7_resultof_tbf___UnitsOfTime"/>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:frequency)">
						<xsl:variable name="var9_resultof_tbf__integer" as="node()*">
							<xsl:call-template name="tbf:tbf4_integer">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var10_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var9_resultof_tbf__integer"/>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:frequencyMax)">
						<xsl:variable name="var11_resultof_tbf__integer" as="node()*">
							<xsl:call-template name="tbf:tbf4_integer">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var12_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var11_resultof_tbf__integer"/>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:period)">
						<xsl:variable name="var13_resultof_tbf__decimal" as="node()*">
							<xsl:call-template name="tbf:tbf5_decimal">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var14_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var13_resultof_tbf__decimal"/>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:periodMax)">
						<xsl:variable name="var15_resultof_tbf__decimal" as="node()*">
							<xsl:call-template name="tbf:tbf5_decimal">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var16_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var15_resultof_tbf__decimal"/>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:periodUnits)">
						<xsl:variable name="var17_resultof_tbf___UnitsOfTime" as="node()*">
							<xsl:call-template name="tbf:tbf46_UnitsOfTime">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var18_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var17_resultof_tbf___UnitsOfTime"/>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:when)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf47_EventTiming">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf45_Duration">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:value)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf5_decimal">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:comparator)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf28_QuantityComparator">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:unit)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf1_string">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:system)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf8_uri">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf12_code">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf46_UnitsOfTime">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@value">
			<xsl:attribute name="value" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf47_EventTiming">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@value">
			<xsl:attribute name="value" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf48_Meta">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::fhir:extension)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf2_Extension">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:versionId)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf15_id">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:lastUpdated)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf7_instant">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:profile)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf8_uri">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:security)">
						<xsl:variable name="var1_resultof_tbf___Coding" as="node()*">
							<xsl:call-template name="tbf:tbf25_Coding">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var2_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var1_resultof_tbf___Coding"/>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::fhir:tag)">
						<xsl:variable name="var3_resultof_tbf___Coding" as="node()*">
							<xsl:call-template name="tbf:tbf25_Coding">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var4_resultof_node_name" as="xs:QName" select="fn:node-name(.)"/>
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:sequence select="$var3_resultof_tbf___Coding"/>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf49_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:p)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf50_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h1)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf56_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h2)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf59_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h3)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h4)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h5)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h6)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:div)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ul)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ol)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dl)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf96_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:pre)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf99_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:hr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf100_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:blockquote)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf101_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:address)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf102_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:fieldset)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf103_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:table)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf105_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:form)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf112_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:noscript)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf113_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf50_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf51_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@accesskey">
			<xsl:attribute name="accesskey" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@tabindex">
			<xsl:attribute name="tabindex" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onfocus">
			<xsl:attribute name="onfocus" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onblur">
			<xsl:attribute name="onblur" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@charset">
			<xsl:attribute name="charset" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@type">
			<xsl:attribute name="type" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@name">
			<xsl:attribute name="name" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@href">
			<xsl:attribute name="href" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@hreflang">
			<xsl:attribute name="hreflang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@rel">
			<xsl:attribute name="rel" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@rev">
			<xsl:attribute name="rev" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@shape">
			<xsl:attribute name="shape" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@coords">
			<xsl:attribute name="coords" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf52_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf53_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf54_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf55_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@name">
			<xsl:attribute name="name" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:p)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf50_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h1)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf56_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h2)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf59_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h3)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h4)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h5)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h6)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:div)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ul)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ol)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dl)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf96_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:pre)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf99_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:hr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf100_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:blockquote)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf101_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:address)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf102_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:fieldset)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf103_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:table)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf105_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:form)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf112_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:noscript)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf113_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:area)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf117_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf56_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf57_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@declare">
			<xsl:attribute name="declare" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@classid">
			<xsl:attribute name="classid" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@codebase">
			<xsl:attribute name="codebase" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@data">
			<xsl:attribute name="data" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@type">
			<xsl:attribute name="type" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@codetype">
			<xsl:attribute name="codetype" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@archive">
			<xsl:attribute name="archive" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@standby">
			<xsl:attribute name="standby" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@height">
			<xsl:attribute name="height" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@width">
			<xsl:attribute name="width" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@usemap">
			<xsl:attribute name="usemap" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@name">
			<xsl:attribute name="name" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@tabindex">
			<xsl:attribute name="tabindex" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:param)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf58_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:p)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf50_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h1)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf56_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h2)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf59_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h3)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h4)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h5)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h6)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:div)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ul)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ol)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dl)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf96_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:pre)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf99_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:hr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf100_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:blockquote)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf101_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:address)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf102_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:fieldset)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf103_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:table)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf105_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:form)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf112_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:noscript)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf113_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf58_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@name">
			<xsl:attribute name="name" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@value">
			<xsl:attribute name="value" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@valuetype">
			<xsl:attribute name="valuetype" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@type">
			<xsl:attribute name="type" select="fn:string(.)"/>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf59_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf60_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@src">
			<xsl:attribute name="src" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@alt">
			<xsl:attribute name="alt" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@longdesc">
			<xsl:attribute name="longdesc" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@height">
			<xsl:attribute name="height" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@width">
			<xsl:attribute name="width" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@usemap">
			<xsl:attribute name="usemap" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ismap">
			<xsl:attribute name="ismap" select="fn:string(.)"/>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf61_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf62_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf63_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf64_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf65_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf66_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf67_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf68_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf69_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf70_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@cite">
			<xsl:attribute name="cite" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf71_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf72_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf73_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf74_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf75_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf76_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf77_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf78_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf79_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@accesskey">
			<xsl:attribute name="accesskey" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@tabindex">
			<xsl:attribute name="tabindex" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onfocus">
			<xsl:attribute name="onfocus" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onblur">
			<xsl:attribute name="onblur" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@type">
			<xsl:attribute name="type" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@name">
			<xsl:attribute name="name" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@value">
			<xsl:attribute name="value" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@checked">
			<xsl:attribute name="checked" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@disabled">
			<xsl:attribute name="disabled" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@readonly">
			<xsl:attribute name="readonly" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@size">
			<xsl:attribute name="size" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@maxlength">
			<xsl:attribute name="maxlength" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@src">
			<xsl:attribute name="src" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@alt">
			<xsl:attribute name="alt" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@usemap">
			<xsl:attribute name="usemap" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onselect">
			<xsl:attribute name="onselect" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onchange">
			<xsl:attribute name="onchange" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@accept">
			<xsl:attribute name="accept" select="fn:string(.)"/>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf80_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@name">
			<xsl:attribute name="name" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@size">
			<xsl:attribute name="size" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@multiple">
			<xsl:attribute name="multiple" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@disabled">
			<xsl:attribute name="disabled" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@tabindex">
			<xsl:attribute name="tabindex" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onfocus">
			<xsl:attribute name="onfocus" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onblur">
			<xsl:attribute name="onblur" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onchange">
			<xsl:attribute name="onchange" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:optgroup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf81_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:option)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf82_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf81_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@disabled">
			<xsl:attribute name="disabled" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@label">
			<xsl:attribute name="label" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:option)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf82_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf82_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@selected">
			<xsl:attribute name="selected" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@disabled">
			<xsl:attribute name="disabled" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@label">
			<xsl:attribute name="label" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@value">
			<xsl:attribute name="value" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:sequence select="fn:string($input)"/>
	</xsl:template>
	<xsl:template name="tbf:tbf83_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@accesskey">
			<xsl:attribute name="accesskey" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@tabindex">
			<xsl:attribute name="tabindex" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onfocus">
			<xsl:attribute name="onfocus" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onblur">
			<xsl:attribute name="onblur" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@name">
			<xsl:attribute name="name" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@rows">
			<xsl:attribute name="rows" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@cols">
			<xsl:attribute name="cols" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@disabled">
			<xsl:attribute name="disabled" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@readonly">
			<xsl:attribute name="readonly" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onselect">
			<xsl:attribute name="onselect" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onchange">
			<xsl:attribute name="onchange" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:sequence select="fn:string($input)"/>
	</xsl:template>
	<xsl:template name="tbf:tbf84_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@for">
			<xsl:attribute name="for" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@accesskey">
			<xsl:attribute name="accesskey" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onfocus">
			<xsl:attribute name="onfocus" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onblur">
			<xsl:attribute name="onblur" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf85_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@accesskey">
			<xsl:attribute name="accesskey" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@tabindex">
			<xsl:attribute name="tabindex" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onfocus">
			<xsl:attribute name="onfocus" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onblur">
			<xsl:attribute name="onblur" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@name">
			<xsl:attribute name="name" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@value">
			<xsl:attribute name="value" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@type">
			<xsl:attribute name="type" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@disabled">
			<xsl:attribute name="disabled" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:p)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf50_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h1)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf56_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h2)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf59_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h3)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h4)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h5)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h6)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:div)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ul)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ol)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dl)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf96_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:pre)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf99_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:hr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf100_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:blockquote)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf101_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:address)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf102_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:table)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf105_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:noscript)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf113_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf86_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf87_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@cite">
			<xsl:attribute name="cite" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@datetime">
			<xsl:attribute name="datetime" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:p)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf50_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h1)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf56_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h2)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf59_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h3)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h4)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h5)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h6)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:div)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ul)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ol)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dl)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf96_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:pre)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf99_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:hr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf100_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:blockquote)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf101_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:address)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf102_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:fieldset)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf103_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:table)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf105_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:form)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf112_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:noscript)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf113_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf88_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf89_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@cite">
			<xsl:attribute name="cite" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@datetime">
			<xsl:attribute name="datetime" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:p)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf50_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h1)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf56_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h2)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf59_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h3)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h4)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h5)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h6)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:div)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ul)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ol)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dl)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf96_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:pre)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf99_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:hr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf100_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:blockquote)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf101_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:address)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf102_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:fieldset)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf103_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:table)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf105_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:form)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf112_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:noscript)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf113_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf90_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf91_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@charset">
			<xsl:attribute name="charset" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@type">
			<xsl:attribute name="type" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@src">
			<xsl:attribute name="src" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@defer">
			<xsl:attribute name="defer" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:space">
			<xsl:attribute name="xml:space" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:sequence select="fn:string($input)"/>
	</xsl:template>
	<xsl:template name="tbf:tbf92_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf93_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:p)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf50_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h1)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf56_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h2)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf59_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h3)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h4)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h5)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h6)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:div)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ul)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ol)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dl)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf96_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:pre)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf99_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:hr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf100_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:blockquote)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf101_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:address)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf102_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:fieldset)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf103_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:table)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf105_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:form)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf112_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:noscript)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf113_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf94_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:li)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf49_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf95_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:li)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf49_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf96_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:dt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf97_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf98_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf97_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf98_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:p)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf50_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h1)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf56_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h2)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf59_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h3)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h4)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h5)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h6)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:div)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ul)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ol)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dl)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf96_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:pre)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf99_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:hr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf100_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:blockquote)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf101_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:address)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf102_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:fieldset)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf103_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:table)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf105_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:form)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf112_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:noscript)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf113_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf99_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:space">
			<xsl:attribute name="xml:space" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf100_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf101_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@cite">
			<xsl:attribute name="cite" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:p)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf50_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h1)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf56_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h2)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf59_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h3)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h4)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h5)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h6)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:div)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ul)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ol)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dl)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf96_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:pre)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf99_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:hr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf100_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:blockquote)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf101_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:address)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf102_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:fieldset)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf103_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:table)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf105_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:form)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf112_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:noscript)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf113_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf102_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf103_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:legend)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf104_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:p)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf50_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h1)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf56_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h2)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf59_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h3)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h4)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h5)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h6)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:div)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ul)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ol)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dl)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf96_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:pre)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf99_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:hr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf100_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:blockquote)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf101_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:address)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf102_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:fieldset)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf103_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:table)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf105_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:form)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf112_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:noscript)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf113_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf104_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@accesskey">
			<xsl:attribute name="accesskey" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf105_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@summary">
			<xsl:attribute name="summary" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@width">
			<xsl:attribute name="width" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@border">
			<xsl:attribute name="border" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@frame">
			<xsl:attribute name="frame" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@rules">
			<xsl:attribute name="rules" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@cellspacing">
			<xsl:attribute name="cellspacing" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@cellpadding">
			<xsl:attribute name="cellpadding" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:caption)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf106_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:col)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf107_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:colgroup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf108_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:thead)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf109_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tfoot)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf115_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tbody)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf116_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf110_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf106_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf107_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@span">
			<xsl:attribute name="span" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@width">
			<xsl:attribute name="width" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@align">
			<xsl:attribute name="align" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@char">
			<xsl:attribute name="char" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@charoff">
			<xsl:attribute name="charoff" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@valign">
			<xsl:attribute name="valign" select="fn:string(.)"/>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf108_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@span">
			<xsl:attribute name="span" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@width">
			<xsl:attribute name="width" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@align">
			<xsl:attribute name="align" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@char">
			<xsl:attribute name="char" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@charoff">
			<xsl:attribute name="charoff" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@valign">
			<xsl:attribute name="valign" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:col)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf107_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf109_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@align">
			<xsl:attribute name="align" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@char">
			<xsl:attribute name="char" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@charoff">
			<xsl:attribute name="charoff" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@valign">
			<xsl:attribute name="valign" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:tr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf110_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf110_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@align">
			<xsl:attribute name="align" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@char">
			<xsl:attribute name="char" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@charoff">
			<xsl:attribute name="charoff" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@valign">
			<xsl:attribute name="valign" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:th)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf111_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:td)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf114_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf111_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@abbr">
			<xsl:attribute name="abbr" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@axis">
			<xsl:attribute name="axis" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@headers">
			<xsl:attribute name="headers" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@scope">
			<xsl:attribute name="scope" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@rowspan">
			<xsl:attribute name="rowspan" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@colspan">
			<xsl:attribute name="colspan" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@align">
			<xsl:attribute name="align" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@char">
			<xsl:attribute name="char" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@charoff">
			<xsl:attribute name="charoff" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@valign">
			<xsl:attribute name="valign" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:p)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf50_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h1)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf56_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h2)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf59_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h3)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h4)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h5)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h6)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:div)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ul)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ol)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dl)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf96_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:pre)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf99_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:hr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf100_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:blockquote)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf101_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:address)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf102_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:fieldset)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf103_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:table)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf105_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:form)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf112_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:noscript)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf113_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf112_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@action">
			<xsl:attribute name="action" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@method">
			<xsl:attribute name="method" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@enctype">
			<xsl:attribute name="enctype" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onsubmit">
			<xsl:attribute name="onsubmit" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onreset">
			<xsl:attribute name="onreset" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@accept">
			<xsl:attribute name="accept" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@accept-charset">
			<xsl:attribute name="accept-charset" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:p)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf50_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h1)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf56_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h2)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf59_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h3)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h4)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h5)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h6)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:div)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ul)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ol)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dl)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf96_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:pre)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf99_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:hr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf100_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:blockquote)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf101_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:address)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf102_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:fieldset)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf103_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:table)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf105_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:noscript)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf113_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf113_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:p)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf50_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h1)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf56_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h2)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf59_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h3)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h4)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h5)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h6)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:div)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ul)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ol)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dl)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf96_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:pre)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf99_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:hr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf100_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:blockquote)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf101_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:address)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf102_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:fieldset)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf103_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:table)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf105_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:form)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf112_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:noscript)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf113_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf114_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@abbr">
			<xsl:attribute name="abbr" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@axis">
			<xsl:attribute name="axis" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@headers">
			<xsl:attribute name="headers" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@scope">
			<xsl:attribute name="scope" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@rowspan">
			<xsl:attribute name="rowspan" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@colspan">
			<xsl:attribute name="colspan" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@align">
			<xsl:attribute name="align" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@char">
			<xsl:attribute name="char" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@charoff">
			<xsl:attribute name="charoff" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@valign">
			<xsl:attribute name="valign" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:p)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf50_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h1)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf56_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h2)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf59_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h3)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h4)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h5)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h6)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:div)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ul)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ol)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dl)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf96_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:pre)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf99_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:hr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf100_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:blockquote)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf101_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:address)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf102_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:fieldset)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf103_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:table)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf105_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:form)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf112_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf51_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf52_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf53_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf54_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf55_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:object)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:input)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:select)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:textarea)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:label)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:button)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:noscript)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf113_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ins)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:del)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:script)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf115_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@align">
			<xsl:attribute name="align" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@char">
			<xsl:attribute name="char" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@charoff">
			<xsl:attribute name="charoff" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@valign">
			<xsl:attribute name="valign" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:tr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf110_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf116_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@align">
			<xsl:attribute name="align" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@char">
			<xsl:attribute name="char" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@charoff">
			<xsl:attribute name="charoff" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@valign">
			<xsl:attribute name="valign" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:tr)">
						<xsl:element name="{node-name(.)}" namespace="{namespace-uri(.)}">
							<xsl:call-template name="tbf:tbf110_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf117_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onclick">
			<xsl:attribute name="onclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ondblclick">
			<xsl:attribute name="ondblclick" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousedown">
			<xsl:attribute name="onmousedown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseup">
			<xsl:attribute name="onmouseup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseover">
			<xsl:attribute name="onmouseover" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmousemove">
			<xsl:attribute name="onmousemove" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onmouseout">
			<xsl:attribute name="onmouseout" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeypress">
			<xsl:attribute name="onkeypress" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeydown">
			<xsl:attribute name="onkeydown" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onkeyup">
			<xsl:attribute name="onkeyup" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@accesskey">
			<xsl:attribute name="accesskey" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@tabindex">
			<xsl:attribute name="tabindex" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onfocus">
			<xsl:attribute name="onfocus" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@onblur">
			<xsl:attribute name="onblur" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@shape">
			<xsl:attribute name="shape" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@coords">
			<xsl:attribute name="coords" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@href">
			<xsl:attribute name="href" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@nohref">
			<xsl:attribute name="nohref" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@alt">
			<xsl:attribute name="alt" select="fn:string(.)"/>
		</xsl:for-each>
	</xsl:template>
	<xsl:param name="TemplateExport10" select="'TemplateExport.xml'"/>
	<xsl:param name="TemplateExport3" select="'TemplateExport.xml'"/>
	<xsl:param name="TemplateExport4" select="'TemplateExport.xml'"/>
	<xsl:param name="TemplateExport5" select="'TemplateExport.xml'"/>
	<xsl:param name="TemplateExport6" select="'TemplateExport.xml'"/>
	<xsl:param name="TemplateExport7" select="'TemplateExport.xml'"/>
	<xsl:param name="TemplateExport8" select="'TemplateExport.xml'"/>
	<xsl:param name="TemplateExport9" select="'TemplateExport.xml'"/>
	<xsl:template name="user:getDiscriminator">
		<xsl:param name="TemplateExport" select="()"/>
		<xsl:variable name="var1_isBranchIdentifier" as="node()?" select="$TemplateExport/@isBranchIdentifier"/>
		<discriminator xmlns="http://hl7.org/fhir" xmlns:xhtml="http://www.w3.org/1999/xhtml">
			<xsl:if test="fn:exists($var1_isBranchIdentifier)">
				<xsl:variable name="var2_resultof_equal" as="xs:boolean" select="(xs:string(xs:boolean(fn:string($var1_isBranchIdentifier))) = 'true')"/>
				<xsl:if test="(fn:not($var2_resultof_equal) or fn:exists($TemplateExport/@context))">
					<xsl:variable name="var3_result" as="xs:string">
						<xsl:choose>
							<xsl:when test="$var2_resultof_equal">
								<xsl:sequence select="fn:string($TemplateExport/@context)"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:sequence select="''"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:attribute name="value" namespace="" select="fn:translate(fn:translate($var3_result, '@', ''), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')"/>
				</xsl:if>
			</xsl:if>
		</discriminator>
	</xsl:template>
	<xsl:template name="user:createValueSetBinding">
		<xsl:param name="TemplateExport" select="()"/>
		<xsl:variable name="var1_oid" as="node()?" select="$TemplateExport/@oid"/>
		<xsl:variable name="var2_isStatic" as="node()?" select="$TemplateExport/@isStatic"/>
		<xsl:variable name="var3_date" as="node()?" select="$TemplateExport/@date"/>
		<xsl:variable name="var4_name" as="node()?" select="$TemplateExport/@name"/>
		<binding xmlns="http://hl7.org/fhir" xmlns:osr="http://a9.com/-/opensearch/extensions/relevance/1.0/" xmlns:os="http://a9.com/-/spec/opensearch/1.1/" xmlns:at="http://purl.org/atompub/tombstones/1.0" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:atom="http://www.w3.org/2005/Atom">
			<xsl:if test="fn:exists($var3_date)">
				<extension>
					<xsl:attribute name="url" namespace="" select="xs:string(xs:anyURI('urn:lantanagroup.com/fhirExtension/valueSetDate'))"/>
					<valueDate>
						<xsl:attribute name="value" namespace="" select="xs:string(xs:date(fn:string($var3_date)))"/>
					</valueDate>
				</extension>
			</xsl:if>
			<name>
				<xsl:if test="fn:exists($var4_name)">
					<xsl:attribute name="value" namespace="" select="fn:string($var4_name)"/>
				</xsl:if>
			</name>
			<xsl:if test="fn:exists($var2_isStatic)">
				<xsl:variable name="var5_resultof_vmf__inputtoresult" as="xs:string?">
					<xsl:call-template name="vmf:vmf1_inputtoresult">
						<xsl:with-param name="input" select="xs:string(xs:boolean(fn:string($var2_isStatic)))" as="xs:string"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:if test="fn:exists($var5_resultof_vmf__inputtoresult)">
					<isExtensible>
						<xsl:attribute name="value" namespace="" select="xs:string(xs:boolean($var5_resultof_vmf__inputtoresult))"/>
					</isExtensible>
				</xsl:if>
			</xsl:if>
			<description>
				<xsl:for-each select="$TemplateExport/ns0:Description">
					<xsl:attribute name="value" namespace="" select="fn:string(.)"/>
				</xsl:for-each>
			</description>
			<referenceUri>
				<xsl:if test="fn:exists($var1_oid)">
					<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI(fn:string($var1_oid)))"/>
				</xsl:if>
			</referenceUri>
		</binding>
	</xsl:template>
	<xsl:template name="user:createXPath">
		<xsl:param name="cardinality" select="()"/>
		<xsl:param name="context" select="()"/>
		<xsl:variable name="var1_resultof_concat" as="xs:string" select="fn:concat('count(', $context)"/>
		<xsl:variable name="var2_resultof_substring_before" as="xs:string" select="fn:substring-before($cardinality, '..')"/>
		<xsl:variable name="var3_resultof_substring_after" as="xs:string" select="fn:substring-after($cardinality, '..')"/>
		<xsl:variable name="var4_resultof_concat" as="xs:string" select="fn:concat($var1_resultof_concat, ')')"/>
		<xsl:variable name="var5_resultof_concat" as="xs:string" select="fn:concat($var4_resultof_concat, '&gt;=')"/>
		<xsl:variable name="var6_resultof_concat" as="xs:string" select="fn:concat($var5_resultof_concat, $var2_resultof_substring_before)"/>
		<xsl:choose>
			<xsl:when test="('*' = $var3_resultof_substring_after)">
				<xsl:sequence select="$var6_resultof_concat"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:sequence select="fn:concat(fn:concat($var6_resultof_concat, ' and '), fn:concat(fn:concat($var4_resultof_concat, '&lt;='), $var3_resultof_substring_after))"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="user:createDefinition">
		<xsl:param name="Constraint" select="()"/>
		<xsl:param name="contextPath" select="()"/>
		<xsl:variable name="var1_isVerbose" as="node()?" select="$Constraint/@isVerbose"/>
		<xsl:variable name="var2_SchematronTest" as="node()*" select="$Constraint/ns0:SchematronTest"/>
		<xsl:variable name="var3_conformance" as="node()?" select="$Constraint/@conformance"/>
		<xsl:variable name="var4_context" as="node()?" select="$Constraint/@context"/>
		<xsl:variable name="var5_number" as="node()?" select="$Constraint/@number"/>
		<xsl:variable name="var6_SingleValueCode" as="node()*" select="$Constraint/ns0:SingleValueCode"/>
		<xsl:variable name="var7_containedTemplateOid" as="node()?" select="$Constraint/@containedTemplateOid"/>
		<xsl:variable name="var8_containedTemplateType" as="node()?" select="$Constraint/@containedTemplateType"/>
		<xsl:variable name="var9_cardinality" as="node()?" select="$Constraint/@cardinality"/>
		<xsl:variable name="var10_Label" as="node()*" select="$Constraint/ns0:Label"/>
		<xsl:variable name="var11_Description" as="node()*" select="$Constraint/ns0:Description"/>
		<xsl:variable name="var12_resultof_exists" as="xs:boolean" select="fn:exists($var2_SchematronTest)"/>
		<xsl:variable name="var13_resultof_exists" as="xs:boolean" select="fn:exists($var9_cardinality)"/>
		<xsl:variable name="var14_resultof_exists" as="xs:boolean" select="fn:exists($var10_Label)"/>
		<xsl:variable name="var15_resultof_exists" as="xs:boolean" select="fn:exists($var11_Description)"/>
		<definition xmlns="http://hl7.org/fhir" xmlns:osr="http://a9.com/-/opensearch/extensions/relevance/1.0/" xmlns:os="http://a9.com/-/spec/opensearch/1.1/" xmlns:at="http://purl.org/atompub/tombstones/1.0" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:atom="http://www.w3.org/2005/Atom">
			<short>
				<xsl:if test="($var14_resultof_exists or fn:exists($var4_context))">
					<xsl:attribute name="value" namespace="">
						<xsl:choose>
							<xsl:when test="$var14_resultof_exists">
								<xsl:variable name="var16_resultof_map" as="xs:string*">
									<xsl:for-each select="$var10_Label">
										<xsl:sequence select="fn:string(.)"/>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="xs:string(fn:string-join(for $x in $var16_resultof_map return xs:string($x), ' '))"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:sequence select="fn:string($var4_context)"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:attribute>
				</xsl:if>
			</short>
			<formal>
				<xsl:if test="($var15_resultof_exists or fn:exists($var4_context))">
					<xsl:attribute name="value" namespace="">
						<xsl:choose>
							<xsl:when test="$var15_resultof_exists">
								<xsl:variable name="var17_resultof_map" as="xs:string*">
									<xsl:for-each select="$var11_Description">
										<xsl:sequence select="fn:string(.)"/>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="xs:string(fn:string-join(for $x in $var17_resultof_map return xs:string($x), ' '))"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:sequence select="fn:string($var4_context)"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:attribute>
				</xsl:if>
			</formal>
			<min>
				<xsl:if test="$var13_resultof_exists">
					<xsl:attribute name="value" namespace="" select="xs:string(xs:integer(fn:substring-before(fn:string($var9_cardinality), '..')))"/>
				</xsl:if>
			</min>
			<max>
				<xsl:if test="$var13_resultof_exists">
					<xsl:attribute name="value" namespace="" select="fn:substring-after(fn:string($var9_cardinality), '..')"/>
				</xsl:if>
			</max>
			<xsl:variable name="var18_create_type" as="node()">
				<type xmlns:osr="http://a9.com/-/opensearch/extensions/relevance/1.0/" xmlns:os="http://a9.com/-/spec/opensearch/1.1/" xmlns:at="http://purl.org/atompub/tombstones/1.0" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:atom="http://www.w3.org/2005/Atom">
					<code>
						<xsl:if test="fn:exists($var8_containedTemplateType)">
							<xsl:attribute name="value" namespace="" select="fn:string($var8_containedTemplateType)"/>
						</xsl:if>
					</code>
					<profile>
						<xsl:if test="fn:exists($var7_containedTemplateOid)">
							<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI(fn:string($var7_containedTemplateOid)))"/>
						</xsl:if>
					</profile>
				</type>
			</xsl:variable>
			<xsl:if test="fn:exists($var7_containedTemplateOid)">
				<type>
					<xsl:sequence select="($var18_create_type/@node(), $var18_create_type/node())"/>
				</type>
			</xsl:if>
			<xsl:for-each select="$var6_SingleValueCode[fn:exists(@code)][fn:not((fn:true() and fn:exists(($Constraint/ns0:CodeSystem)[fn:exists(@oid)])))]">
				<valueCode>
					<xsl:attribute name="value" namespace="" select="fn:string(@code)"/>
				</valueCode>
			</xsl:for-each>
			<xsl:variable name="var20_create_valueCodeableConcept" as="node()">
				<valueCodeableConcept xmlns:osr="http://a9.com/-/opensearch/extensions/relevance/1.0/" xmlns:os="http://a9.com/-/spec/opensearch/1.1/" xmlns:at="http://purl.org/atompub/tombstones/1.0" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:atom="http://www.w3.org/2005/Atom">
					<xsl:for-each select="$var6_SingleValueCode[fn:exists(@code)]">
						<xsl:variable name="var19_displayName" as="node()?" select="@displayName"/>
						<coding>
							<system>
								<xsl:for-each select="($Constraint/ns0:CodeSystem)[fn:exists(@oid)]">
									<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI(fn:string(@oid)))"/>
								</xsl:for-each>
							</system>
							<code>
								<xsl:attribute name="value" namespace="" select="fn:string(@code)"/>
							</code>
							<display>
								<xsl:if test="fn:exists($var19_displayName)">
									<xsl:attribute name="value" namespace="" select="fn:string($var19_displayName)"/>
								</xsl:if>
							</display>
						</coding>
					</xsl:for-each>
				</valueCodeableConcept>
			</xsl:variable>
			<xsl:if test="(fn:exists($var6_SingleValueCode[fn:exists(@code)]) and fn:exists(($Constraint/ns0:CodeSystem)[fn:exists(@oid)]))">
				<valueCodeableConcept>
					<xsl:sequence select="($var20_create_valueCodeableConcept/@node(), $var20_create_valueCodeableConcept/node())"/>
				</valueCodeableConcept>
			</xsl:if>
			<constraint>
				<key>
					<xsl:attribute name="value" namespace="">
						<xsl:choose>
							<xsl:when test="fn:exists($var5_number)">
								<xsl:sequence select="xs:string(xs:integer(fn:string($var5_number)))"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:sequence select="generate-id($Constraint)"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:attribute>
				</key>
				<name>
					<xsl:if test="fn:exists($var4_context)">
						<xsl:attribute name="value" namespace="" select="fn:string($var4_context)"/>
					</xsl:if>
				</name>
				<severity>
					<xsl:if test="fn:exists($var3_conformance)">
						<xsl:attribute name="value" namespace="">
							<xsl:call-template name="vmf:vmf2_inputtoresult">
								<xsl:with-param name="input" select="fn:string($var3_conformance)" as="xs:string"/>
							</xsl:call-template>
						</xsl:attribute>
					</xsl:if>
				</severity>
				<human>
					<xsl:for-each select="$Constraint/ns0:NarrativeText">
						<xsl:attribute name="value" namespace="" select="fn:string(.)"/>
					</xsl:for-each>
				</human>
				<xsl:variable name="var25_result" as="xs:boolean">
					<xsl:choose>
						<xsl:when test="$var12_resultof_exists">
							<xsl:sequence select="fn:true()"/>
						</xsl:when>
						<xsl:when test="$var13_resultof_exists">
							<xsl:variable name="var21_resultof_createXPath" as="xs:string?">
								<xsl:call-template name="user:createXPath">
									<xsl:with-param name="cardinality" select="fn:string($var9_cardinality)" as="xs:string"/>
									<xsl:with-param name="context" select="$contextPath" as="xs:string"/>
								</xsl:call-template>
							</xsl:variable>
							<xsl:variable name="var22_result" as="xs:string?">
								<xsl:if test="fn:exists($var21_resultof_createXPath)">
									<xsl:sequence select="$var21_resultof_createXPath"/>
								</xsl:if>
							</xsl:variable>
							<xsl:sequence select="fn:exists($var22_result)"/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:sequence select="fn:false()"/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xpath>
					<xsl:if test="$var25_result">
						<xsl:attribute name="value" namespace="">
							<xsl:choose>
								<xsl:when test="$var12_resultof_exists">
									<xsl:variable name="var23_resultof_map" as="xs:string*">
										<xsl:for-each select="$var2_SchematronTest">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:sequence select="xs:string(fn:string-join(for $x in $var23_resultof_map return xs:string($x), ' '))"/>
								</xsl:when>
								<xsl:otherwise>
									<xsl:variable name="var24_resultof_createXPath" as="xs:string?">
										<xsl:call-template name="user:createXPath">
											<xsl:with-param name="cardinality" select="fn:string($var9_cardinality)" as="xs:string"/>
											<xsl:with-param name="context" select="$contextPath" as="xs:string"/>
										</xsl:call-template>
									</xsl:variable>
									<xsl:if test="fn:exists($var24_resultof_createXPath)">
										<xsl:sequence select="$var24_resultof_createXPath"/>
									</xsl:if>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:attribute>
					</xsl:if>
				</xpath>
			</constraint>
			<mustSupport>
				<xsl:if test="fn:exists($var1_isVerbose)">
					<xsl:attribute name="value" namespace="" select="xs:string(fn:not(xs:boolean(fn:string($var1_isVerbose))))"/>
				</xsl:if>
			</mustSupport>
			<isModifier>
				<xsl:attribute name="value" namespace="" select="xs:string(fn:false())"/>
			</isModifier>
			<xsl:for-each select="$Constraint/ns0:ValueSet">
				<xsl:variable name="var26_resultof_createValueSetBinding" as="node()?">
					<xsl:call-template name="user:createValueSetBinding">
						<xsl:with-param name="TemplateExport" as="node()">
							<ValueSet xmlns="http://www.lantanagroup.com">
								<xsl:sequence select="(./@node(), ./node())"/>
							</ValueSet>
						</xsl:with-param>
					</xsl:call-template>
				</xsl:variable>
				<xsl:for-each select="$var26_resultof_createValueSetBinding">
					<binding>
						<xsl:sequence select="(./@node(), ./node())"/>
					</binding>
				</xsl:for-each>
			</xsl:for-each>
		</definition>
	</xsl:template>
	<xsl:template name="user:flattenConstraints">
		<xsl:param name="parentContext" select="()"/>
		<xsl:param name="Constraint" select="()"/>
		<xsl:param name="sliceName" select="()"/>
		<xsl:variable name="var1_Constraint" as="node()*" select="$Constraint/ns0:Constraint"/>
		<xsl:variable name="var2_isBranch" as="node()?" select="$Constraint/@isBranch"/>
		<xsl:variable name="var3_context" as="node()?" select="$Constraint/@context"/>
		<xsl:variable name="var4_resultof_exists" as="xs:boolean" select="fn:exists($var3_context)"/>
		<xsl:variable name="var5_val" as="xs:boolean" select="((fn:exists($var2_isBranch) and (xs:string(xs:boolean(fn:string($var2_isBranch))) = 'true')) or (fn:not(fn:exists($var2_isBranch)) and fn:false()))"/>
		<element xmlns="http://hl7.org/fhir" xmlns:xhtml="http://www.w3.org/1999/xhtml">
			<path>
				<xsl:if test="$var4_resultof_exists">
					<xsl:variable name="var6_result" as="xs:string">
						<xsl:choose>
							<xsl:when test="fn:exists($parentContext)">
								<xsl:sequence select="$parentContext"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:sequence select="''"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:attribute name="value" namespace="" select="fn:translate(fn:concat($var6_result, fn:string($var3_context)), '/', '.')"/>
				</xsl:if>
			</path>
			<xsl:variable name="var9_create_name" as="node()">
				<name xmlns:osr="http://a9.com/-/opensearch/extensions/relevance/1.0/" xmlns:os="http://a9.com/-/spec/opensearch/1.1/" xmlns:at="http://purl.org/atompub/tombstones/1.0" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:atom="http://www.w3.org/2005/Atom">
					<xsl:if test="($var5_val or fn:exists($sliceName))">
						<xsl:attribute name="value" namespace="">
							<xsl:choose>
								<xsl:when test="$var5_val">
									<xsl:sequence select="fn:concat('slice-', generate-id($Constraint))"/>
								</xsl:when>
								<xsl:otherwise>
									<xsl:sequence select="$sliceName"/>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:attribute>
					</xsl:if>
				</name>
			</xsl:variable>
			<xsl:variable name="var8_result" as="xs:boolean">
				<xsl:choose>
					<xsl:when test="($var5_val or fn:exists($sliceName))">
						<xsl:variable name="var7_result" as="xs:string">
							<xsl:choose>
								<xsl:when test="$var5_val">
									<xsl:sequence select="fn:concat('slice-', generate-id($Constraint))"/>
								</xsl:when>
								<xsl:otherwise>
									<xsl:sequence select="$sliceName"/>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:sequence select="(fn:string-length($var7_result) != xs:decimal('0'))"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:sequence select="fn:false()"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			<xsl:if test="$var8_result">
				<name>
					<xsl:call-template name="tbf:tbf1_string">
						<xsl:with-param name="input" select="$var9_create_name" as="node()"/>
					</xsl:call-template>
				</name>
			</xsl:if>
			<xsl:variable name="var12_create_slicing" as="node()">
				<slicing xmlns:xhtml="http://www.w3.org/1999/xhtml">
					<xsl:variable name="var11_resultof_map" as="node()*">
						<xsl:for-each select="$var1_Constraint">
							<xsl:variable name="var10_resultof_getDiscriminator" as="node()?">
								<xsl:call-template name="user:getDiscriminator">
									<xsl:with-param name="TemplateExport" as="node()">
										<Constraint xmlns="http://www.lantanagroup.com">
											<xsl:sequence select="(./@node(), ./node())"/>
										</Constraint>
									</xsl:with-param>
								</xsl:call-template>
							</xsl:variable>
							<xsl:sequence select="$var10_resultof_getDiscriminator[fn:exists(@value)][(fn:string-length(fn:string(@value)) != xs:decimal('0'))]"/>
						</xsl:for-each>
					</xsl:variable>
					<xsl:for-each select="$var11_resultof_map[(fn:position() &lt;= xs:integer(xs:decimal('1')))]">
						<discriminator>
							<xsl:sequence select="(./@node(), ./node())"/>
						</discriminator>
					</xsl:for-each>
					<ordered>
						<xsl:attribute name="value" namespace="" select="xs:string(fn:false())"/>
					</ordered>
					<rules>
						<xsl:attribute name="value" namespace="" select="'open'"/>
					</rules>
				</slicing>
			</xsl:variable>
			<xsl:if test="(fn:exists($var2_isBranch) and (xs:string(xs:boolean(fn:string($var2_isBranch))) = 'true'))">
				<slicing>
					<xsl:sequence select="($var12_create_slicing/@node(), $var12_create_slicing/node())"/>
				</slicing>
			</xsl:if>
			<xsl:if test="$var4_resultof_exists">
				<xsl:variable name="var13_result" as="xs:string">
					<xsl:choose>
						<xsl:when test="fn:exists($parentContext)">
							<xsl:sequence select="$parentContext"/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:sequence select="''"/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:variable name="var14_resultof_createDefinition" as="node()?">
					<xsl:call-template name="user:createDefinition">
						<xsl:with-param name="Constraint" as="node()">
							<Constraint xmlns="http://www.lantanagroup.com">
								<xsl:sequence select="($Constraint/@node(), $Constraint/node())"/>
							</Constraint>
						</xsl:with-param>
						<xsl:with-param name="contextPath" select="fn:concat($var13_result, fn:string($var3_context))" as="xs:string"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:for-each select="$var14_resultof_createDefinition">
					<definition>
						<xsl:call-template name="tbf:tbf18_markdown">
							<xsl:with-param name="input" select="." as="node()"/>
						</xsl:call-template>
					</definition>
				</xsl:for-each>
			</xsl:if>
		</element>
		<xsl:if test="$var4_resultof_exists">
			<xsl:for-each select="$var1_Constraint">
				<xsl:variable name="var15_result" as="xs:string">
					<xsl:choose>
						<xsl:when test="fn:exists($parentContext)">
							<xsl:sequence select="$parentContext"/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:sequence select="''"/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:variable name="var16_resultof_flattenConstraints" as="node()*">
					<xsl:call-template name="user:flattenConstraints">
						<xsl:with-param name="parentContext" select="fn:concat(fn:concat($var15_result, fn:string($var3_context)), '/')" as="xs:string"/>
						<xsl:with-param name="Constraint" as="node()">
							<Constraint xmlns="http://www.lantanagroup.com">
								<xsl:sequence select="(./@node(), ./node())"/>
							</Constraint>
						</xsl:with-param>
						<xsl:with-param name="sliceName" as="xs:string?">
							<xsl:choose>
								<xsl:when test="$var5_val">
									<xsl:sequence select="fn:concat('slice-', generate-id($Constraint))"/>
								</xsl:when>
								<xsl:otherwise>
									<xsl:if test="fn:exists($sliceName)">
										<xsl:sequence select="$sliceName"/>
									</xsl:if>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:with-param>
					</xsl:call-template>
				</xsl:variable>
				<xsl:for-each select="$var16_resultof_flattenConstraints">
					<element xmlns="http://hl7.org/fhir" xmlns:xhtml="http://www.w3.org/1999/xhtml">
						<xsl:sequence select="@node()"/>
						<xsl:sequence select="node()"/>
					</element>
				</xsl:for-each>
			</xsl:for-each>
		</xsl:if>
	</xsl:template>
	<xsl:template name="user:constraintToListItem">
		<xsl:param name="ConstraintType" select="()"/>
		<xsl:for-each select="$ConstraintType">
			<li xmlns="http://www.w3.org/1999/xhtml" xmlns:osr="http://a9.com/-/opensearch/extensions/relevance/1.0/" xmlns:os="http://a9.com/-/spec/opensearch/1.1/" xmlns:fhir="http://hl7.org/fhir" xmlns:at="http://purl.org/atompub/tombstones/1.0" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:atom="http://www.w3.org/2005/Atom">
				<xsl:for-each select="ns0:NarrativeText">
					<p>
						<xsl:sequence select="fn:string(.)"/>
					</p>
				</xsl:for-each>
				<xsl:variable name="var2_resultof_map" as="node()*">
					<xsl:for-each select="ns0:Constraint">
						<ol xmlns:osr="http://a9.com/-/opensearch/extensions/relevance/1.0/" xmlns:os="http://a9.com/-/spec/opensearch/1.1/" xmlns:fhir="http://hl7.org/fhir" xmlns:at="http://purl.org/atompub/tombstones/1.0" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:atom="http://www.w3.org/2005/Atom">
							<xsl:variable name="var1_resultof_constraintToListItem" as="node()*">
								<xsl:call-template name="user:constraintToListItem">
									<xsl:with-param name="ConstraintType" as="node()">
										<ConstraintType xmlns="http://www.lantanagroup.com">
											<xsl:sequence select="(./@node(), ./node())"/>
										</ConstraintType>
									</xsl:with-param>
								</xsl:call-template>
							</xsl:variable>
							<xsl:for-each select="$var1_resultof_constraintToListItem">
								<li>
									<xsl:sequence select="(./@node(), ./node())"/>
								</li>
							</xsl:for-each>
						</ol>
					</xsl:for-each>
				</xsl:variable>
				<xsl:for-each select="$var2_resultof_map">
					<ol>
						<xsl:sequence select="(./@node(), ./node())"/>
					</ol>
				</xsl:for-each>
			</li>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="user:addExtensions">
		<xsl:param name="ImplementationGuideName" select="()"/>
		<xsl:variable name="var1_let" as="node()?">
			<xsl:if test="fn:exists($ImplementationGuideName)">
				<extension xmlns="http://hl7.org/fhir" xmlns:osr="http://a9.com/-/opensearch/extensions/relevance/1.0/" xmlns:os="http://a9.com/-/spec/opensearch/1.1/" xmlns:at="http://purl.org/atompub/tombstones/1.0" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:atom="http://www.w3.org/2005/Atom">
					<xsl:attribute name="url" namespace="" select="xs:string(xs:anyURI('urn:lantanagroup.com/fhirExtension/implementationGuideName'))"/>
					<valueString>
						<xsl:attribute name="value" namespace="" select="$ImplementationGuideName"/>
					</valueString>
				</extension>
			</xsl:if>
		</xsl:variable>
		<xsl:for-each select="$var1_let">
			<extension xmlns="http://hl7.org/fhir" xmlns:xhtml="http://www.w3.org/1999/xhtml">
				<xsl:if test="fn:exists(@url)">
					<xsl:attribute name="url" namespace="" select="xs:string(xs:anyURI(fn:string(@url)))"/>
				</xsl:if>
				<valueString>
					<xsl:for-each select="fhir:valueString[fn:exists(@value)]">
						<xsl:attribute name="value" namespace="" select="fn:string(@value)"/>
					</xsl:for-each>
				</valueString>
			</extension>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="user:createStructureDefinition">
		<xsl:param name="Template" select="()"/>
		<xsl:variable name="var1_context" as="node()?" select="$Template/@context"/>
		<xsl:variable name="var2_templateType" as="node()?" select="$Template/@templateType"/>
		<xsl:variable name="var3_organizationName" as="node()?" select="$Template/@organizationName"/>
		<xsl:variable name="var4_publishStatus" as="node()?" select="$Template/@publishStatus"/>
		<xsl:variable name="var5_owningImplementationGuideName" as="node()?" select="$Template/@owningImplementationGuideName"/>
		<xsl:variable name="var6_identifier" as="node()?" select="$Template/@identifier"/>
		<xsl:variable name="var7_title" as="node()?" select="$Template/@title"/>
		<xsl:variable name="var8_Constraint" as="node()*" select="$Template/ns0:Constraint"/>
		<xsl:variable name="var9_resultof_exists" as="xs:boolean" select="fn:exists($var1_context)"/>
		<xsl:variable name="var10_resultof_exists" as="xs:boolean" select="fn:exists($var6_identifier)"/>
		<xsl:variable name="var11_resultof_exists" as="xs:boolean" select="fn:exists($var7_title)"/>
		<xsl:variable name="var12_val" as="node()?">
			<xsl:if test="$var10_resultof_exists">
				<xsl:attribute name="value" select="fn:string($var6_identifier)"/>
			</xsl:if>
		</xsl:variable>
		<StructureDefinition xmlns="http://hl7.org/fhir" xmlns:xhtml="http://www.w3.org/1999/xhtml">
			<id>
				<xsl:sequence select="$var12_val"/>
			</id>
			<text>
				<status>
					<xsl:attribute name="value" namespace="" select="'generated'"/>
				</status>
				<xhtml:div>
					<xsl:if test="$var11_resultof_exists">
						<xhtml:p>
							<xsl:sequence select="fn:string($var7_title)"/>
						</xhtml:p>
					</xsl:if>
					<xsl:variable name="var14_create_ol" as="node()">
						<ol xmlns="http://www.w3.org/1999/xhtml">
							<xsl:variable name="var13_resultof_constraintToListItem" as="node()*">
								<xsl:call-template name="user:constraintToListItem">
									<xsl:with-param name="ConstraintType" as="node()*">
										<xsl:for-each select="$var8_Constraint">
											<ConstraintType xmlns="http://www.lantanagroup.com">
												<xsl:sequence select="(./@node(), ./node())"/>
											</ConstraintType>
										</xsl:for-each>
									</xsl:with-param>
								</xsl:call-template>
							</xsl:variable>
							<xsl:for-each select="$var13_resultof_constraintToListItem">
								<li>
									<xsl:call-template name="tbf:tbf49_">
										<xsl:with-param name="input" select="." as="node()"/>
									</xsl:call-template>
								</li>
							</xsl:for-each>
						</ol>
					</xsl:variable>
					<xsl:if test="fn:exists($var14_create_ol/xhtml:li)">
						<xhtml:ol>
							<xsl:sequence select="($var14_create_ol/@node(), $var14_create_ol/node())"/>
						</xhtml:ol>
					</xsl:if>
				</xhtml:div>
			</text>
			<xsl:variable name="var15_resultof_addExtensions" as="node()*">
				<xsl:call-template name="user:addExtensions">
					<xsl:with-param name="ImplementationGuideName" as="xs:string?">
						<xsl:if test="fn:exists($var5_owningImplementationGuideName)">
							<xsl:sequence select="fn:string($var5_owningImplementationGuideName)"/>
						</xsl:if>
					</xsl:with-param>
				</xsl:call-template>
			</xsl:variable>
			<xsl:for-each select="$var15_resultof_addExtensions">
				<extension>
					<xsl:sequence select="(./@node(), ./node())"/>
				</extension>
			</xsl:for-each>
			<url>
				<xsl:if test="$var10_resultof_exists">
					<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI(fn:string($var6_identifier)))"/>
				</xsl:if>
			</url>
			<identifier>
				<value>
					<xsl:sequence select="$var12_val"/>
				</value>
			</identifier>
			<name>
				<xsl:if test="$var11_resultof_exists">
					<xsl:attribute name="value" namespace="" select="fn:string($var7_title)"/>
				</xsl:if>
			</name>
			<status>
				<xsl:if test="fn:exists($var4_publishStatus)">
					<xsl:variable name="var16_resultof_createFhirStatus" as="xs:string?">
						<xsl:call-template name="user:createFhirStatus">
							<xsl:with-param name="publishStatus" select="fn:string($var4_publishStatus)" as="xs:string"/>
						</xsl:call-template>
					</xsl:variable>
					<xsl:if test="fn:exists($var16_resultof_createFhirStatus)">
						<xsl:attribute name="value" namespace="" select="$var16_resultof_createFhirStatus"/>
					</xsl:if>
				</xsl:if>
			</status>
			<publisher>
				<xsl:if test="fn:exists($var3_organizationName)">
					<xsl:attribute name="value" namespace="" select="fn:string($var3_organizationName)"/>
				</xsl:if>
			</publisher>
			<description>
				<xsl:for-each select="$Template/ns0:Description">
					<xsl:attribute name="value" namespace="" select="fn:string(.)"/>
				</xsl:for-each>
			</description>
			<fhirVersion>
				<xsl:attribute name="value" namespace="" select="'1.0.1'"/>
			</fhirVersion>
			<kind value="resource" />
			<abstract>
				<xsl:attribute name="value" namespace="" select="xs:string(fn:false())"/>
			</abstract>
			<context>
				<xsl:if test="$var9_resultof_exists">
					<xsl:attribute name="value" namespace="" select="fn:string($var1_context)"/>
				</xsl:if>
			</context>
			<differential>
				<xsl:if test="$var9_resultof_exists">
					<xsl:for-each select="$var8_Constraint">
						<xsl:variable name="var17_resultof_flattenConstraints" as="node()*">
							<xsl:call-template name="user:flattenConstraints">
								<xsl:with-param name="parentContext" select="fn:concat(fn:string($var1_context), '/')" as="xs:string"/>
								<xsl:with-param name="Constraint" as="node()">
									<Constraint xmlns="http://www.lantanagroup.com">
										<xsl:sequence select="(./@node(), ./node())"/>
									</Constraint>
								</xsl:with-param>
							</xsl:call-template>
						</xsl:variable>
						<xsl:for-each select="$var17_resultof_flattenConstraints">
							<element>
								<xsl:sequence select="(./@node(), ./node())"/>
							</element>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:if>
			</differential>
		</StructureDefinition>
	</xsl:template>
	<xsl:template name="user:createFhirStatus">
		<xsl:param name="publishStatus" select="()"/>
		<xsl:call-template name="vmf:vmf3_inputtoresult">
			<xsl:with-param name="input" select="$publishStatus" as="xs:string"/>
		</xsl:call-template>
	</xsl:template>
	<xsl:template name="user:createIG">
		<xsl:param name="TemplateExport" select="()"/>
		<xsl:variable name="var1_resultof_map" as="xs:string*">
			<xsl:for-each select="$TemplateExport/@owningImplementationGuideName">
				<xsl:sequence select="fn:string(.)"/>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var7_resultof_map" as="node()*">
			<xsl:for-each select="fn:distinct-values($var1_resultof_map)">
				<xsl:variable name="var2_resultof_map" as="node()*">
					<xsl:for-each select="$TemplateExport[fn:exists(@owningImplementationGuideName)]">
						<Template xmlns="http://www.lantanagroup.com">
							<xsl:sequence select="(./@node(), ./node())"/>
						</Template>
					</xsl:for-each>
				</xsl:variable>
				<entry xmlns="http://hl7.org/fhir" xmlns:xhtml="http://www.w3.org/1999/xhtml">
					<resource>
						<ImplementationGuide>
							<xsl:variable name="var3_resultof_map" as="node()*" select="$var2_resultof_map"/>
							<name>
								<xsl:for-each select="$var3_resultof_map[fn:exists(@owningImplementationGuideName)]">
									<xsl:attribute name="value" namespace="" select="fn:string(@owningImplementationGuideName)"/>
								</xsl:for-each>
							</name>
							<xsl:variable name="var5_resultof_map" as="node()*" select="$var2_resultof_map"/>
							<status>
								<xsl:for-each select="$var5_resultof_map[fn:exists(@publishStatus)]">
									<xsl:variable name="var4_resultof_createFhirStatus" as="xs:string?">
										<xsl:call-template name="user:createFhirStatus">
											<xsl:with-param name="publishStatus" select="fn:string(@publishStatus)" as="xs:string"/>
										</xsl:call-template>
									</xsl:variable>
									<xsl:if test="fn:exists($var4_resultof_createFhirStatus)">
										<xsl:attribute name="value" namespace="" select="$var4_resultof_createFhirStatus"/>
									</xsl:if>
								</xsl:for-each>
							</status>
							<xsl:variable name="var6_resultof_map" as="node()*" select="$var2_resultof_map"/>
							<publisher>
								<xsl:for-each select="$var6_resultof_map[fn:exists(@organizationName)]">
									<xsl:attribute name="value" namespace="" select="fn:string(@organizationName)"/>
								</xsl:for-each>
							</publisher>
							<fhirVersion>
								<xsl:attribute name="value" namespace="" select="'1.0.1'"/>
							</fhirVersion>
						</ImplementationGuide>
					</resource>
				</entry>
			</xsl:for-each>
		</xsl:variable>
		<xsl:for-each select="$var7_resultof_map">
			<entry xmlns="http://hl7.org/fhir" xmlns:xhtml="http://www.w3.org/1999/xhtml">
				<xsl:sequence select="@node()"/>
				<xsl:sequence select="node()"/>
			</entry>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="user:createEntry">
		<xsl:param name="Template" select="()"/>
		<xsl:variable name="var1_resultof_createIG" as="node()*">
			<xsl:call-template name="user:createIG">
				<xsl:with-param name="TemplateExport" as="node()+">
					<xsl:for-each select="$Template">
						<Template xmlns="http://www.lantanagroup.com">
							<xsl:sequence select="(./@node(), ./node())"/>
						</Template>
					</xsl:for-each>
				</xsl:with-param>
			</xsl:call-template>
		</xsl:variable>
		<xsl:for-each select="$var1_resultof_createIG">
			<entry xmlns="http://hl7.org/fhir" xmlns:xhtml="http://www.w3.org/1999/xhtml">
				<xsl:sequence select="@node()"/>
				<xsl:sequence select="node()"/>
			</entry>
		</xsl:for-each>
		<xsl:for-each select="$Template">
			<xsl:variable name="var2_identifier" as="node()?" select="@identifier"/>
			<entry xmlns="http://hl7.org/fhir" xmlns:xhtml="http://www.w3.org/1999/xhtml">
				<xsl:if test="fn:exists($var2_identifier)">
					<xsl:attribute name="id" namespace="" select="fn:string($var2_identifier)"/>
				</xsl:if>
				<xsl:variable name="var3_resultof_createStructureDefinition" as="node()?">
					<xsl:call-template name="user:createStructureDefinition">
						<xsl:with-param name="Template" as="node()">
							<Template xmlns="http://www.lantanagroup.com">
								<xsl:sequence select="(./@node(), ./node())"/>
							</Template>
						</xsl:with-param>
					</xsl:call-template>
				</xsl:variable>
				<resource>
					<xsl:for-each select="$var3_resultof_createStructureDefinition">
						<StructureDefinition>
							<xsl:sequence select="(./@node(), ./node())"/>
						</StructureDefinition>
					</xsl:for-each>
				</resource>
			</entry>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="vmf:vmf1_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='false'">
				<xsl:value-of select="'true'"/>
			</xsl:when>
			<xsl:when test="$input='true'">
				<xsl:value-of select="'false'"/>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:vmf2_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='SHOULD'">
				<xsl:value-of select="'warning'"/>
			</xsl:when>
			<xsl:when test="$input='MAY'">
				<xsl:value-of select="'warning'"/>
			</xsl:when>
			<xsl:when test="$input='SHALL'">
				<xsl:value-of select="'error'"/>
			</xsl:when>
			<xsl:when test="$input='SHALL NOT'">
				<xsl:value-of select="'error'"/>
			</xsl:when>
			<xsl:when test="$input='SHOULD NOT'">
				<xsl:value-of select="'warning'"/>
			</xsl:when>
			<xsl:when test="$input='MAY NOT'">
				<xsl:value-of select="'warning'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="'error'"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:vmf3_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='Draft'">
				<xsl:value-of select="'draft'"/>
			</xsl:when>
			<xsl:when test="$input='Published'">
				<xsl:value-of select="'active'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="'draft'"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:output method="xml" encoding="UTF-8" byte-order-mark="no" indent="yes"/>
	<xsl:template match="/">
		<Bundle xmlns="http://hl7.org/fhir" xmlns:xhtml="http://www.w3.org/1999/xhtml">
			<xsl:attribute name="xsi:schemaLocation" namespace="http://www.w3.org/2001/XMLSchema-instance" select="'http://hl7.org/fhir C:/Users/rickg/SourceTree/trif/Trifolia.Generation/XML/fhir-schemas/DSTU-2/fhir-all-xsd/fhir-single.xsd'"/>
			<xsl:for-each select="ns0:TemplateExport">
				<id>
					<xsl:attribute name="value" namespace="" select="fn:concat('cid:', generate-id(.))"/>
				</id>
				<meta>
					<lastUpdated>
						<xsl:attribute name="value" namespace="" select="xs:string(fn:current-dateTime())"/>
					</lastUpdated>
				</meta>
				<xsl:variable name="var1_resultof_createEntry" as="node()*">
					<xsl:call-template name="user:createEntry">
						<xsl:with-param name="Template" as="node()+">
							<xsl:for-each select="ns0:Template">
								<Template xmlns="http://www.lantanagroup.com">
									<xsl:sequence select="(./@node(), ./node())"/>
								</Template>
							</xsl:for-each>
						</xsl:with-param>
					</xsl:call-template>
				</xsl:variable>
				<xsl:for-each select="$var1_resultof_createEntry">
					<entry>
						<xsl:sequence select="(./@node(), ./node())"/>
					</entry>
				</xsl:for-each>
			</xsl:for-each>
		</Bundle>
	</xsl:template>
</xsl:stylesheet>
