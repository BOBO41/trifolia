<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2014r2sp1

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns0="http://hl7.org/fhir" xmlns:user="http://www.altova.com/MapForce/UDF/user" xmlns:vmf="http://www.altova.com/MapForce/UDF/vmf" xmlns:agt="http://www.altova.com/Mapforce/agt" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:fn="http://www.w3.org/2005/xpath-functions" exclude-result-prefixes="ns0 user vmf agt xs fn">
	<xsl:param name="TemplateExport4" select="'TemplateExport.xml'"/>
	<xsl:param name="fhir-atom-single3" select="'fhir-atom-single.xml'"/>
	<xsl:param name="fhir-atom-single4" select="'fhir-atom-single.xml'"/>
	<xsl:param name="fhir-atom-single5" select="'fhir-atom-single.xml'"/>
	<xsl:template name="user:element2constraint">
		<xsl:param name="parentFhirPath" select="()"/>
		<xsl:param name="element" select="()"/>
		<xsl:param name="children" select="()"/>
		<xsl:variable name="var1_definition" as="node()*" select="$element/ns0:definition"/>
		<ConstraintType xmlns="http://www.lantanagroup.com">
			<xsl:for-each select="($element/ns0:path)[fn:exists(@value)]">
				<xsl:variable name="var2_resultof_contextFromFhirPath" as="xs:string?">
					<xsl:call-template name="user:contextFromFhirPath">
						<xsl:with-param name="parentFHIRPath" select="$parentFhirPath" as="xs:string"/>
						<xsl:with-param name="path" select="fn:string(@value)" as="xs:string"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:if test="fn:exists($var2_resultof_contextFromFhirPath)">
					<xsl:attribute name="context" namespace="" select="$var2_resultof_contextFromFhirPath"/>
				</xsl:if>
			</xsl:for-each>
			<xsl:for-each select="$var1_definition/ns0:constraint">
				<xsl:variable name="var5_resultof_filter" as="node()*">
					<xsl:for-each select="ns0:severity[fn:exists(@value)]">
						<xsl:variable name="var3_resultof_vmf__inputtoresult" as="xs:string?">
							<xsl:call-template name="vmf:vmf1_inputtoresult">
								<xsl:with-param name="input" select="fn:string(@value)" as="xs:string"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var4_resultof_exists" as="xs:boolean" select="fn:exists($var3_resultof_vmf__inputtoresult)"/>
						<xsl:if test="$var4_resultof_exists">
							<xsl:sequence select="."/>
						</xsl:if>
					</xsl:for-each>
				</xsl:variable>
				<xsl:for-each select="$var5_resultof_filter">
					<xsl:attribute name="conformance" namespace="">
						<xsl:call-template name="vmf:vmf1_inputtoresult">
							<xsl:with-param name="input" select="fn:string(@value)" as="xs:string"/>
						</xsl:call-template>
					</xsl:attribute>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:for-each select="$var1_definition">
				<xsl:variable name="var7_current" as="node()" select="."/>
				<xsl:for-each select="ns0:min[fn:exists(@value)]">
					<xsl:variable name="var6_current" as="node()" select="."/>
					<xsl:for-each select="($var7_current/ns0:max)[fn:exists(@value)]">
						<xsl:attribute name="cardinality" namespace="" select="fn:concat(fn:concat(xs:string(xs:integer(fn:string($var6_current/@value))), '..'), fn:string(@value))"/>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:for-each>
			<lcg:SingleValueCode xmlns:lcg="http://www.lantanagroup.com">
				<xsl:for-each select="($var1_definition/ns0:valueCodeableConcept/ns0:coding/ns0:code)[fn:exists(@value)]">
					<xsl:attribute name="code" namespace="" select="fn:string(@value)"/>
				</xsl:for-each>
				<xsl:for-each select="($var1_definition/ns0:valueCodeableConcept/ns0:coding/ns0:display)[fn:exists(@value)]">
					<xsl:attribute name="displayName" namespace="" select="fn:string(@value)"/>
				</xsl:for-each>
			</lcg:SingleValueCode>
			<lcg:CodeSystem xmlns:lcg="http://www.lantanagroup.com">
				<xsl:for-each select="($var1_definition/ns0:valueCodeableConcept/ns0:coding/ns0:system)[fn:exists(@value)]">
					<xsl:attribute name="oid" namespace="" select="xs:string(xs:anyURI(fn:string(@value)))"/>
				</xsl:for-each>
			</lcg:CodeSystem>
			<xsl:for-each select="($var1_definition/ns0:constraint/ns0:xpath)[fn:exists(@value)]">
				<lcg:SchematronTest xmlns:lcg="http://www.lantanagroup.com">
					<xsl:sequence select="fn:string(@value)"/>
				</lcg:SchematronTest>
			</xsl:for-each>
			<xsl:for-each select="($var1_definition/ns0:constraint/ns0:human)[fn:exists(@value)]">
				<lcg:NarrativeText xmlns:lcg="http://www.lantanagroup.com">
					<xsl:sequence select="fn:string(@value)"/>
				</lcg:NarrativeText>
			</xsl:for-each>
			<xsl:for-each select="$children">
				<lcg:Constraint xmlns:lcg="http://www.lantanagroup.com">
					<xsl:sequence select="(./@node(), ./node())"/>
				</lcg:Constraint>
			</xsl:for-each>
		</ConstraintType>
	</xsl:template>
	<xsl:template name="user:contextFromFhirPath">
		<xsl:param name="parentFHIRPath" select="()"/>
		<xsl:param name="path" select="()"/>
		<xsl:sequence select="fn:substring-after($path, fn:concat($parentFHIRPath, '.'))"/>
	</xsl:template>
	<xsl:template name="agt:nestConstraints_var15_function">
		<xsl:param name="val0" as="xs:string?"/>
		<xsl:param name="val1" as="node()"/>
		<xsl:param name="val2" as="node()"/>
		<xsl:param name="par0" as="node()"/>
		<xsl:variable name="var12_result" as="xs:boolean">
			<xsl:choose>
				<xsl:when test="fn:exists($val0)">
					<xsl:variable name="var11_resultof_filter" as="node()*">
						<xsl:for-each select="($val1/ns0:path)[fn:exists(@value)]">
							<xsl:variable name="var8_resultof_contextFromFhirPath" as="xs:string?">
								<xsl:call-template name="user:contextFromFhirPath">
									<xsl:with-param name="parentFHIRPath" select="$val0" as="xs:string"/>
									<xsl:with-param name="path" select="fn:string(@value)" as="xs:string"/>
								</xsl:call-template>
							</xsl:variable>
							<xsl:variable name="var9_result" as="xs:boolean?">
								<xsl:if test="fn:exists($var8_resultof_contextFromFhirPath)">
									<xsl:if test="((($val0 != fn:string(@value)) and ('' != $var8_resultof_contextFromFhirPath)) and fn:not(fn:contains($var8_resultof_contextFromFhirPath, '.')))">
										<xsl:sequence select="fn:true()"/>
									</xsl:if>
								</xsl:if>
							</xsl:variable>
							<xsl:variable name="var10_resultof_exists" as="xs:boolean" select="fn:exists($var9_result)"/>
							<xsl:if test="$var10_resultof_exists">
								<xsl:sequence select="."/>
							</xsl:if>
						</xsl:for-each>
					</xsl:variable>
					<xsl:sequence select="fn:exists($var11_resultof_filter)"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="fn:false()"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:variable name="var13_let" as="node()?">
			<xsl:if test="$var12_result">
				<element xmlns="http://hl7.org/fhir" xmlns:osr="http://a9.com/-/opensearch/extensions/relevance/1.0/" xmlns:os="http://a9.com/-/spec/opensearch/1.1/" xmlns:at="http://purl.org/atompub/tombstones/1.0" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:atom="http://www.w3.org/2005/Atom">
					<xsl:sequence select="$val1/@node()"/>
					<xsl:sequence select="$val1/node()"/>
				</element>
			</xsl:if>
		</xsl:variable>
		<xsl:variable name="var14_resultof_element_constraint" as="node()?">
			<xsl:call-template name="user:element2constraint">
				<xsl:with-param name="parentFhirPath" select="$val0" as="xs:string"/>
				<xsl:with-param name="element" as="node()">
					<element xmlns="http://hl7.org/fhir">
						<xsl:sequence select="($par0/@node(), $par0/node())"/>
					</element>
				</xsl:with-param>
				<xsl:with-param name="children" as="node()*">
					<xsl:for-each select="$var13_let/ns0:path">
						<xsl:variable name="var7_current" as="node()" select="."/>
						<xsl:variable name="var5_resultof_filter" as="node()*">
							<xsl:for-each select="($val2/ns0:element)[fn:exists($var7_current/@value)]">
								<xsl:variable name="var4_resultof_filter" as="node()*">
									<xsl:for-each select="ns0:path[fn:exists(@value)]">
										<xsl:variable name="var2_resultof_contextFromFhirPath" as="xs:string?">
											<xsl:call-template name="user:contextFromFhirPath">
												<xsl:with-param name="parentFHIRPath" select="fn:string($var7_current/@value)" as="xs:string"/>
												<xsl:with-param name="path" select="fn:string(@value)" as="xs:string"/>
											</xsl:call-template>
										</xsl:variable>
										<xsl:variable name="var3_result" as="xs:boolean?">
											<xsl:if test="fn:exists($var2_resultof_contextFromFhirPath)">
												<xsl:if test="(((fn:string($var7_current/@value) != fn:string(@value)) and ('' != $var2_resultof_contextFromFhirPath)) and fn:not(fn:contains($var2_resultof_contextFromFhirPath, '.')))">
													<xsl:sequence select="fn:true()"/>
												</xsl:if>
											</xsl:if>
										</xsl:variable>
										<xsl:if test="fn:exists($var3_result)">
											<xsl:sequence select="."/>
										</xsl:if>
									</xsl:for-each>
								</xsl:variable>
								<xsl:if test="fn:exists($var4_resultof_filter)">
									<xsl:sequence select="."/>
								</xsl:if>
							</xsl:for-each>
						</xsl:variable>
						<xsl:for-each select="$var5_resultof_filter">
							<xsl:variable name="var6_resultof_nestConstraints" as="node()*">
								<xsl:call-template name="user:nestConstraints">
									<xsl:with-param name="parentFhirPath" as="xs:string?">
										<xsl:if test="fn:exists($var7_current/@value)">
											<xsl:sequence select="fn:string($var7_current/@value)"/>
										</xsl:if>
									</xsl:with-param>
									<xsl:with-param name="element" as="node()">
										<element xmlns="http://hl7.org/fhir">
											<xsl:sequence select="(./@node(), ./node())"/>
										</element>
									</xsl:with-param>
									<xsl:with-param name="structure" as="node()">
										<structure xmlns="http://hl7.org/fhir">
											<xsl:sequence select="($val2/@node(), $val2/node())"/>
										</structure>
									</xsl:with-param>
								</xsl:call-template>
							</xsl:variable>
							<xsl:for-each select="$var6_resultof_nestConstraints">
								<ConstraintType xmlns="http://www.lantanagroup.com">
									<xsl:sequence select="(./@node(), ./node())"/>
								</ConstraintType>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:with-param>
			</xsl:call-template>
		</xsl:variable>
		<xsl:if test="fn:exists($var14_resultof_element_constraint)">
			<Constraint xmlns="http://www.lantanagroup.com">
				<xsl:sequence select="($var14_resultof_element_constraint/@node(), $var14_resultof_element_constraint/node())"/>
			</Constraint>
		</xsl:if>
	</xsl:template>
	<xsl:template name="user:nestConstraints">
		<xsl:param name="parentFhirPath" select="()"/>
		<xsl:param name="element" select="()"/>
		<xsl:param name="structure" select="()"/>
		<xsl:variable name="var1_resultof_exists" as="xs:boolean" select="fn:exists($parentFhirPath)"/>
		<xsl:if test="$var1_resultof_exists">
			<xsl:variable name="var20_result" as="xs:boolean">
				<xsl:choose>
					<xsl:when test="$var1_resultof_exists">
						<xsl:variable name="var19_resultof_filter" as="node()*">
							<xsl:for-each select="($element/ns0:path)[fn:exists(@value)]">
								<xsl:variable name="var16_resultof_contextFromFhirPath" as="xs:string?">
									<xsl:call-template name="user:contextFromFhirPath">
										<xsl:with-param name="parentFHIRPath" select="$parentFhirPath" as="xs:string"/>
										<xsl:with-param name="path" select="fn:string(@value)" as="xs:string"/>
									</xsl:call-template>
								</xsl:variable>
								<xsl:variable name="var17_result" as="xs:boolean?">
									<xsl:if test="fn:exists($var16_resultof_contextFromFhirPath)">
										<xsl:if test="((($parentFhirPath != fn:string(@value)) and ('' != $var16_resultof_contextFromFhirPath)) and fn:not(fn:contains($var16_resultof_contextFromFhirPath, '.')))">
											<xsl:sequence select="fn:true()"/>
										</xsl:if>
									</xsl:if>
								</xsl:variable>
								<xsl:variable name="var18_resultof_exists" as="xs:boolean" select="fn:exists($var17_result)"/>
								<xsl:if test="$var18_resultof_exists">
									<xsl:sequence select="."/>
								</xsl:if>
							</xsl:for-each>
						</xsl:variable>
						<xsl:sequence select="fn:exists($var19_resultof_filter)"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:sequence select="fn:false()"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			<xsl:variable name="var21_let" as="node()?">
				<xsl:if test="$var20_result">
					<element xmlns="http://hl7.org/fhir" xmlns:osr="http://a9.com/-/opensearch/extensions/relevance/1.0/" xmlns:os="http://a9.com/-/spec/opensearch/1.1/" xmlns:at="http://purl.org/atompub/tombstones/1.0" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:atom="http://www.w3.org/2005/Atom">
						<xsl:sequence select="$element/@node()"/>
						<xsl:sequence select="$element/node()"/>
					</element>
				</xsl:if>
			</xsl:variable>
			<xsl:for-each select="$var21_let">
				<xsl:call-template name="agt:nestConstraints_var15_function">
					<xsl:with-param name="val0" select="$parentFhirPath" as="xs:string?"/>
					<xsl:with-param name="val1" select="$element" as="node()"/>
					<xsl:with-param name="val2" select="$structure" as="node()"/>
					<xsl:with-param name="par0" select="." as="node()"/>
				</xsl:call-template>
			</xsl:for-each>
		</xsl:if>
	</xsl:template>
	<xsl:template name="vmf:vmf1_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='error'">
				<xsl:value-of select="'SHALL'"/>
			</xsl:when>
			<xsl:when test="$input='warning'">
				<xsl:value-of select="'SHOULD'"/>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:output method="xml" encoding="UTF-8" byte-order-mark="no" indent="yes"/>
	<xsl:template match="/">
		<TemplateExport xmlns="http://www.lantanagroup.com">
			<xsl:attribute name="xsi:schemaLocation" namespace="http://www.w3.org/2001/XMLSchema-instance" select="'http://www.lantanagroup.com C:/Users/Sean/Documents/Lantana/Code/TRIF/Trifolia.Shared/ImportExport/Model/TemplateExport.xsd'"/>
			<xsl:for-each select="atom:feed/atom:entry">
				<xsl:variable name="var7_current" as="node()" select="."/>
				<xsl:for-each select="atom:content/ns0:Profile">
					<xsl:variable name="var1_structure" as="node()*" select="ns0:structure"/>
					<xsl:variable name="var2_value" as="node()?" select="ns0:name/@value"/>
					<xsl:variable name="var3_resultof_filter" as="node()*" select="$var1_structure[fn:exists(ns0:type/@value)]"/>
					<Template>
						<xsl:for-each select="$var7_current/atom:id">
							<xsl:attribute name="identifier" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
						</xsl:for-each>
						<xsl:attribute name="implementationGuideType" namespace="" select="'FHIR DSTU1'"/>
						<xsl:for-each select="$var3_resultof_filter">
							<xsl:attribute name="templateType" namespace="" select="fn:string(ns0:type/@value)"/>
						</xsl:for-each>
						<xsl:if test="fn:exists($var2_value)">
							<xsl:attribute name="title" namespace="" select="fn:string($var2_value)"/>
						</xsl:if>
						<xsl:attribute name="bookmark" namespace="" select="generate-id(.)"/>
						<xsl:for-each select="$var3_resultof_filter">
							<xsl:attribute name="context" namespace="" select="fn:string(ns0:type/@value)"/>
						</xsl:for-each>
						<xsl:for-each select="$var3_resultof_filter">
							<xsl:attribute name="contextType" namespace="" select="fn:string(ns0:type/@value)"/>
						</xsl:for-each>
						<xsl:attribute name="isOpen" namespace="" select="xs:string(fn:false())"/>
						<xsl:for-each select="$var1_structure">
							<xsl:variable name="var6_current" as="node()" select="."/>
							<xsl:for-each select="ns0:element">
								<xsl:variable name="var4_value" as="node()?" select="$var6_current/ns0:type/@value"/>
								<xsl:variable name="var5_resultof_nestConstraints" as="node()*">
									<xsl:call-template name="user:nestConstraints">
										<xsl:with-param name="parentFhirPath" as="xs:string?">
											<xsl:if test="fn:exists($var4_value)">
												<xsl:sequence select="fn:string($var4_value)"/>
											</xsl:if>
										</xsl:with-param>
										<xsl:with-param name="element" as="node()">
											<element xmlns="http://hl7.org/fhir">
												<xsl:sequence select="(./@node(), ./node())"/>
											</element>
										</xsl:with-param>
										<xsl:with-param name="structure" as="node()">
											<structure xmlns="http://hl7.org/fhir">
												<xsl:sequence select="($var6_current/@node(), $var6_current/node())"/>
											</structure>
										</xsl:with-param>
									</xsl:call-template>
								</xsl:variable>
								<xsl:for-each select="$var5_resultof_nestConstraints">
									<Constraint>
										<xsl:sequence select="(./@node(), ./node())"/>
									</Constraint>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
					</Template>
				</xsl:for-each>
			</xsl:for-each>
		</TemplateExport>
	</xsl:template>
</xsl:stylesheet>
