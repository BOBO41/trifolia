<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2014r2sp1

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:fhir="http://hl7.org/fhir" xmlns:user="http://www.altova.com/MapForce/UDF/user" xmlns:vmf="http://www.altova.com/MapForce/UDF/vmf" xmlns:agt="http://www.altova.com/Mapforce/agt" xmlns:ns0="http://www.lantanagroup.com" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" exclude-result-prefixes="user vmf agt ns0 xs fn">
	<xsl:param name="TemplateExport3" select="'TemplateExport.xml'"/>
	<xsl:param name="TemplateExport4" select="'TemplateExport.xml'"/>
	<xsl:param name="TemplateExport5" select="'TemplateExport.xml'"/>
	<xsl:param name="TemplateExport6" select="'TemplateExport.xml'"/>
	<xsl:param name="TemplateExport7" select="'TemplateExport.xml'"/>
	<xsl:param name="TemplateExport8" select="'TemplateExport.xml'"/>
	<xsl:template name="user:getDiscriminator">
		<xsl:param name="TemplateExport" select="()"/>
		<xsl:variable name="var1_isBranchIdentifier" as="node()?" select="$TemplateExport/@isBranchIdentifier"/>
		<discriminator xmlns="http://hl7.org/fhir" xmlns:osr="http://a9.com/-/opensearch/extensions/relevance/1.0/" xmlns:os="http://a9.com/-/spec/opensearch/1.1/" xmlns:at="http://purl.org/atompub/tombstones/1.0" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:atom="http://www.w3.org/2005/Atom">
			<xsl:if test="fn:exists($var1_isBranchIdentifier)">
				<xsl:variable name="var2_resultof_equal" as="xs:boolean" select="(xs:string(xs:boolean(fn:string($var1_isBranchIdentifier))) = 'true')"/>
				<xsl:if test="(fn:not($var2_resultof_equal) or fn:exists($TemplateExport/@context))">
					<xsl:variable name="var3_result" as="xs:string">
						<xsl:choose>
							<xsl:when test="$var2_resultof_equal">
								<xsl:sequence select="fn:string($TemplateExport/@context)"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:sequence select="''"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:attribute name="value" namespace="" select="fn:translate(fn:translate($var3_result, '@', ''), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')"/>
				</xsl:if>
			</xsl:if>
		</discriminator>
	</xsl:template>
	<xsl:template name="user:createValueSetBinding">
		<xsl:param name="TemplateExport" select="()"/>
		<xsl:variable name="var1_oid" as="node()?" select="$TemplateExport/@oid"/>
		<xsl:variable name="var2_isStatic" as="node()?" select="$TemplateExport/@isStatic"/>
		<xsl:variable name="var3_date" as="node()?" select="$TemplateExport/@date"/>
		<xsl:variable name="var4_name" as="node()?" select="$TemplateExport/@name"/>
		<binding xmlns="http://hl7.org/fhir" xmlns:osr="http://a9.com/-/opensearch/extensions/relevance/1.0/" xmlns:os="http://a9.com/-/spec/opensearch/1.1/" xmlns:at="http://purl.org/atompub/tombstones/1.0" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:atom="http://www.w3.org/2005/Atom">
			<xsl:if test="fn:exists($var3_date)">
				<extension>
					<xsl:attribute name="url" namespace="" select="xs:string(xs:anyURI('urn:lantanagroup.com/fhirExtension/valueSetDate'))"/>
					<valueDate>
						<xsl:attribute name="value" namespace="" select="xs:string(xs:date(fn:string($var3_date)))"/>
					</valueDate>
				</extension>
			</xsl:if>
			<name>
				<xsl:if test="fn:exists($var4_name)">
					<xsl:attribute name="value" namespace="" select="fn:string($var4_name)"/>
				</xsl:if>
			</name>
			<xsl:if test="fn:exists($var2_isStatic)">
				<xsl:variable name="var5_resultof_vmf__inputtoresult" as="xs:string?">
					<xsl:call-template name="vmf:vmf1_inputtoresult">
						<xsl:with-param name="input" select="xs:string(xs:boolean(fn:string($var2_isStatic)))" as="xs:string"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:if test="fn:exists($var5_resultof_vmf__inputtoresult)">
					<isExtensible>
						<xsl:attribute name="value" namespace="" select="xs:string(xs:boolean($var5_resultof_vmf__inputtoresult))"/>
					</isExtensible>
				</xsl:if>
			</xsl:if>
			<description>
				<xsl:for-each select="$TemplateExport/ns0:Description">
					<xsl:attribute name="value" namespace="" select="fn:string(.)"/>
				</xsl:for-each>
			</description>
			<referenceUri>
				<xsl:if test="fn:exists($var1_oid)">
					<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI(fn:string($var1_oid)))"/>
				</xsl:if>
			</referenceUri>
		</binding>
	</xsl:template>
	<xsl:template name="user:createXPath">
		<xsl:param name="cardinality" select="()"/>
		<xsl:param name="context" select="()"/>
		<xsl:variable name="var1_resultof_concat" as="xs:string" select="fn:concat('count(', $context)"/>
		<xsl:variable name="var2_resultof_substring_before" as="xs:string" select="fn:substring-before($cardinality, '..')"/>
		<xsl:variable name="var3_resultof_substring_after" as="xs:string" select="fn:substring-after($cardinality, '..')"/>
		<xsl:variable name="var4_resultof_concat" as="xs:string" select="fn:concat($var1_resultof_concat, ')')"/>
		<xsl:variable name="var5_resultof_concat" as="xs:string" select="fn:concat($var4_resultof_concat, '&gt;=')"/>
		<xsl:variable name="var6_resultof_concat" as="xs:string" select="fn:concat($var5_resultof_concat, $var2_resultof_substring_before)"/>
		<xsl:choose>
			<xsl:when test="('*' = $var3_resultof_substring_after)">
				<xsl:sequence select="$var6_resultof_concat"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:sequence select="fn:concat(fn:concat($var6_resultof_concat, ' and '), fn:concat(fn:concat($var4_resultof_concat, '&lt;='), $var3_resultof_substring_after))"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="user:createDefinition">
		<xsl:param name="Constraint" select="()"/>
		<xsl:param name="contextPath" select="()"/>
		<xsl:variable name="var1_isVerbose" as="node()?" select="$Constraint/@isVerbose"/>
		<xsl:variable name="var2_SchematronTest" as="node()*" select="$Constraint/ns0:SchematronTest"/>
		<xsl:variable name="var3_conformance" as="node()?" select="$Constraint/@conformance"/>
		<xsl:variable name="var4_context" as="node()?" select="$Constraint/@context"/>
		<xsl:variable name="var5_number" as="node()?" select="$Constraint/@number"/>
		<xsl:variable name="var6_CodeSystem" as="node()*" select="$Constraint/ns0:CodeSystem"/>
		<xsl:variable name="var7_SingleValueCode" as="node()*" select="$Constraint/ns0:SingleValueCode"/>
		<xsl:variable name="var8_containedTemplateOid" as="node()?" select="$Constraint/@containedTemplateOid"/>
		<xsl:variable name="var9_containedTemplateType" as="node()?" select="$Constraint/@containedTemplateType"/>
		<xsl:variable name="var10_cardinality" as="node()?" select="$Constraint/@cardinality"/>
		<xsl:variable name="var11_Label" as="node()*" select="$Constraint/ns0:Label"/>
		<xsl:variable name="var12_Description" as="node()*" select="$Constraint/ns0:Description"/>
		<xsl:variable name="var13_resultof_exists" as="xs:boolean" select="fn:exists($var2_SchematronTest)"/>
		<xsl:variable name="var14_resultof_exists" as="xs:boolean" select="fn:exists($var10_cardinality)"/>
		<xsl:variable name="var15_resultof_exists" as="xs:boolean" select="fn:exists($var11_Label)"/>
		<xsl:variable name="var16_resultof_exists" as="xs:boolean" select="fn:exists($var12_Description)"/>
		<definition xmlns="http://hl7.org/fhir" xmlns:osr="http://a9.com/-/opensearch/extensions/relevance/1.0/" xmlns:os="http://a9.com/-/spec/opensearch/1.1/" xmlns:at="http://purl.org/atompub/tombstones/1.0" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:atom="http://www.w3.org/2005/Atom">
			<short>
				<xsl:if test="($var15_resultof_exists or fn:exists($var4_context))">
					<xsl:attribute name="value" namespace="">
						<xsl:choose>
							<xsl:when test="$var15_resultof_exists">
								<xsl:variable name="var17_resultof_map" as="xs:string*">
									<xsl:for-each select="$var11_Label">
										<xsl:sequence select="fn:string(.)"/>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="xs:string(fn:string-join(for $x in $var17_resultof_map return xs:string($x), ' '))"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:sequence select="fn:string($var4_context)"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:attribute>
				</xsl:if>
			</short>
			<formal>
				<xsl:if test="($var16_resultof_exists or fn:exists($var4_context))">
					<xsl:attribute name="value" namespace="">
						<xsl:choose>
							<xsl:when test="$var16_resultof_exists">
								<xsl:variable name="var18_resultof_map" as="xs:string*">
									<xsl:for-each select="$var12_Description">
										<xsl:sequence select="fn:string(.)"/>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="xs:string(fn:string-join(for $x in $var18_resultof_map return xs:string($x), ' '))"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:sequence select="fn:string($var4_context)"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:attribute>
				</xsl:if>
			</formal>
			<min>
				<xsl:if test="$var14_resultof_exists">
					<xsl:attribute name="value" namespace="" select="xs:string(xs:integer(fn:substring-before(fn:string($var10_cardinality), '..')))"/>
				</xsl:if>
			</min>
			<max>
				<xsl:if test="$var14_resultof_exists">
					<xsl:attribute name="value" namespace="" select="fn:substring-after(fn:string($var10_cardinality), '..')"/>
				</xsl:if>
			</max>
			<xsl:variable name="var19_create_type" as="node()">
				<type xmlns:osr="http://a9.com/-/opensearch/extensions/relevance/1.0/" xmlns:os="http://a9.com/-/spec/opensearch/1.1/" xmlns:at="http://purl.org/atompub/tombstones/1.0" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:atom="http://www.w3.org/2005/Atom">
					<code>
						<xsl:if test="fn:exists($var9_containedTemplateType)">
							<xsl:attribute name="value" namespace="" select="fn:string($var9_containedTemplateType)"/>
						</xsl:if>
					</code>
					<profile>
						<xsl:if test="fn:exists($var8_containedTemplateOid)">
							<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI(fn:string($var8_containedTemplateOid)))"/>
						</xsl:if>
					</profile>
				</type>
			</xsl:variable>
			<xsl:if test="fn:exists($var8_containedTemplateOid)">
				<type>
					<xsl:sequence select="($var19_create_type/@node(), $var19_create_type/node())"/>
				</type>
			</xsl:if>
			<xsl:for-each select="$var7_SingleValueCode[fn:exists(@code)][fn:not((fn:true() and fn:exists($var6_CodeSystem[fn:exists(@oid)])))]">
				<valueCode>
					<xsl:attribute name="value" namespace="" select="fn:string(@code)"/>
				</valueCode>
			</xsl:for-each>
			<xsl:variable name="var20_create_valueCodeableConcept" as="node()">
				<valueCodeableConcept xmlns:osr="http://a9.com/-/opensearch/extensions/relevance/1.0/" xmlns:os="http://a9.com/-/spec/opensearch/1.1/" xmlns:at="http://purl.org/atompub/tombstones/1.0" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:atom="http://www.w3.org/2005/Atom">
					<coding>
						<system>
							<xsl:for-each select="$var6_CodeSystem[fn:exists(@oid)]">
								<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI(fn:string(@oid)))"/>
							</xsl:for-each>
						</system>
						<code>
							<xsl:for-each select="$var7_SingleValueCode[fn:exists(@code)]">
								<xsl:attribute name="value" namespace="" select="fn:string(@code)"/>
							</xsl:for-each>
						</code>
						<display>
							<xsl:for-each select="$var7_SingleValueCode[fn:exists(@displayName)]">
								<xsl:attribute name="value" namespace="" select="fn:string(@displayName)"/>
							</xsl:for-each>
						</display>
					</coding>
				</valueCodeableConcept>
			</xsl:variable>
			<xsl:if test="(fn:exists($var7_SingleValueCode[fn:exists(@code)]) and fn:exists($var6_CodeSystem[fn:exists(@oid)]))">
				<valueCodeableConcept>
					<xsl:sequence select="($var20_create_valueCodeableConcept/@node(), $var20_create_valueCodeableConcept/node())"/>
				</valueCodeableConcept>
			</xsl:if>
			<constraint>
				<key>
					<xsl:attribute name="value" namespace="">
						<xsl:choose>
							<xsl:when test="fn:exists($var5_number)">
								<xsl:sequence select="xs:string(xs:integer(fn:string($var5_number)))"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:sequence select="generate-id($Constraint)"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:attribute>
				</key>
				<name>
					<xsl:if test="fn:exists($var4_context)">
						<xsl:attribute name="value" namespace="" select="fn:string($var4_context)"/>
					</xsl:if>
				</name>
				<severity>
					<xsl:if test="fn:exists($var3_conformance)">
						<xsl:attribute name="value" namespace="">
							<xsl:call-template name="vmf:vmf2_inputtoresult">
								<xsl:with-param name="input" select="fn:string($var3_conformance)" as="xs:string"/>
							</xsl:call-template>
						</xsl:attribute>
					</xsl:if>
				</severity>
				<human>
					<xsl:for-each select="$Constraint/ns0:NarrativeText">
						<xsl:attribute name="value" namespace="" select="fn:string(.)"/>
					</xsl:for-each>
				</human>
				<xsl:variable name="var25_result" as="xs:boolean">
					<xsl:choose>
						<xsl:when test="$var13_resultof_exists">
							<xsl:sequence select="fn:true()"/>
						</xsl:when>
						<xsl:when test="$var14_resultof_exists">
							<xsl:variable name="var21_resultof_createXPath" as="xs:string?">
								<xsl:call-template name="user:createXPath">
									<xsl:with-param name="cardinality" select="fn:string($var10_cardinality)" as="xs:string"/>
									<xsl:with-param name="context" select="$contextPath" as="xs:string"/>
								</xsl:call-template>
							</xsl:variable>
							<xsl:variable name="var22_result" as="xs:string?">
								<xsl:if test="fn:exists($var21_resultof_createXPath)">
									<xsl:sequence select="$var21_resultof_createXPath"/>
								</xsl:if>
							</xsl:variable>
							<xsl:sequence select="fn:exists($var22_result)"/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:sequence select="fn:false()"/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xpath>
					<xsl:if test="$var25_result">
						<xsl:attribute name="value" namespace="">
							<xsl:choose>
								<xsl:when test="$var13_resultof_exists">
									<xsl:variable name="var23_resultof_map" as="xs:string*">
										<xsl:for-each select="$var2_SchematronTest">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:sequence select="xs:string(fn:string-join(for $x in $var23_resultof_map return xs:string($x), ' '))"/>
								</xsl:when>
								<xsl:otherwise>
									<xsl:variable name="var24_resultof_createXPath" as="xs:string?">
										<xsl:call-template name="user:createXPath">
											<xsl:with-param name="cardinality" select="fn:string($var10_cardinality)" as="xs:string"/>
											<xsl:with-param name="context" select="$contextPath" as="xs:string"/>
										</xsl:call-template>
									</xsl:variable>
									<xsl:if test="fn:exists($var24_resultof_createXPath)">
										<xsl:sequence select="$var24_resultof_createXPath"/>
									</xsl:if>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:attribute>
					</xsl:if>
				</xpath>
			</constraint>
			<mustSupport>
				<xsl:if test="fn:exists($var1_isVerbose)">
					<xsl:attribute name="value" namespace="" select="xs:string(fn:not(xs:boolean(fn:string($var1_isVerbose))))"/>
				</xsl:if>
			</mustSupport>
			<isModifier>
				<xsl:attribute name="value" namespace="" select="xs:string(fn:false())"/>
			</isModifier>
			<xsl:for-each select="$Constraint/ns0:ValueSet">
				<xsl:variable name="var26_resultof_createValueSetBinding" as="node()?">
					<xsl:call-template name="user:createValueSetBinding">
						<xsl:with-param name="TemplateExport" as="node()">
							<ValueSet xmlns="http://www.lantanagroup.com">
								<xsl:sequence select="(./@node(), ./node())"/>
							</ValueSet>
						</xsl:with-param>
					</xsl:call-template>
				</xsl:variable>
				<xsl:for-each select="$var26_resultof_createValueSetBinding">
					<binding>
						<xsl:sequence select="(./@node(), ./node())"/>
					</binding>
				</xsl:for-each>
			</xsl:for-each>
		</definition>
	</xsl:template>
	<xsl:template name="user:flattenConstraints">
		<xsl:param name="parentContext" select="()"/>
		<xsl:param name="Constraint" select="()"/>
		<xsl:param name="sliceName" select="()"/>
		<xsl:variable name="var1_Constraint" as="node()*" select="$Constraint/ns0:Constraint"/>
		<xsl:variable name="var2_isBranch" as="node()?" select="$Constraint/@isBranch"/>
		<xsl:variable name="var3_context" as="node()?" select="$Constraint/@context"/>
		<xsl:variable name="var4_resultof_exists" as="xs:boolean" select="fn:exists($var3_context)"/>
		<xsl:variable name="var5_val" as="xs:boolean" select="((fn:exists($var2_isBranch) and (xs:string(xs:boolean(fn:string($var2_isBranch))) = 'true')) or (fn:not(fn:exists($var2_isBranch)) and fn:false()))"/>
		<element xmlns="http://hl7.org/fhir" xmlns:osr="http://a9.com/-/opensearch/extensions/relevance/1.0/" xmlns:os="http://a9.com/-/spec/opensearch/1.1/" xmlns:at="http://purl.org/atompub/tombstones/1.0" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:atom="http://www.w3.org/2005/Atom">
			<path>
				<xsl:if test="$var4_resultof_exists">
					<xsl:variable name="var6_result" as="xs:string">
						<xsl:choose>
							<xsl:when test="fn:exists($parentContext)">
								<xsl:sequence select="$parentContext"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:sequence select="''"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:attribute name="value" namespace="" select="fn:translate(fn:concat($var6_result, fn:string($var3_context)), '/', '.')"/>
				</xsl:if>
			</path>
			<xsl:variable name="var9_create_name" as="node()">
				<name xmlns:osr="http://a9.com/-/opensearch/extensions/relevance/1.0/" xmlns:os="http://a9.com/-/spec/opensearch/1.1/" xmlns:at="http://purl.org/atompub/tombstones/1.0" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:atom="http://www.w3.org/2005/Atom">
					<xsl:if test="($var5_val or fn:exists($sliceName))">
						<xsl:attribute name="value" namespace="">
							<xsl:choose>
								<xsl:when test="$var5_val">
									<xsl:sequence select="fn:concat('slice-', generate-id($Constraint))"/>
								</xsl:when>
								<xsl:otherwise>
									<xsl:sequence select="$sliceName"/>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:attribute>
					</xsl:if>
				</name>
			</xsl:variable>
			<xsl:variable name="var8_result" as="xs:boolean">
				<xsl:choose>
					<xsl:when test="($var5_val or fn:exists($sliceName))">
						<xsl:variable name="var7_result" as="xs:string">
							<xsl:choose>
								<xsl:when test="$var5_val">
									<xsl:sequence select="fn:concat('slice-', generate-id($Constraint))"/>
								</xsl:when>
								<xsl:otherwise>
									<xsl:sequence select="$sliceName"/>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:sequence select="(fn:string-length($var7_result) != xs:decimal('0'))"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:sequence select="fn:false()"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			<xsl:if test="$var8_result">
				<name>
					<xsl:sequence select="($var9_create_name/@node(), $var9_create_name/node())"/>
				</name>
			</xsl:if>
			<xsl:variable name="var12_create_slicing" as="node()">
				<slicing xmlns:osr="http://a9.com/-/opensearch/extensions/relevance/1.0/" xmlns:os="http://a9.com/-/spec/opensearch/1.1/" xmlns:at="http://purl.org/atompub/tombstones/1.0" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:atom="http://www.w3.org/2005/Atom">
					<xsl:variable name="var11_resultof_map" as="node()*">
						<xsl:for-each select="$var1_Constraint">
							<xsl:variable name="var10_resultof_getDiscriminator" as="node()?">
								<xsl:call-template name="user:getDiscriminator">
									<xsl:with-param name="TemplateExport" as="node()">
										<Constraint xmlns="http://www.lantanagroup.com">
											<xsl:sequence select="(./@node(), ./node())"/>
										</Constraint>
									</xsl:with-param>
								</xsl:call-template>
							</xsl:variable>
							<xsl:sequence select="$var10_resultof_getDiscriminator[fn:exists(@value)][(fn:string-length(fn:string(@value)) != xs:decimal('0'))]"/>
						</xsl:for-each>
					</xsl:variable>
					<xsl:for-each select="$var11_resultof_map[(fn:position() &lt;= xs:integer(xs:decimal('1')))]">
						<discriminator>
							<xsl:sequence select="(./@node(), ./node())"/>
						</discriminator>
					</xsl:for-each>
					<ordered>
						<xsl:attribute name="value" namespace="" select="xs:string(fn:false())"/>
					</ordered>
					<rules>
						<xsl:attribute name="value" namespace="" select="'open'"/>
					</rules>
				</slicing>
			</xsl:variable>
			<xsl:if test="(fn:exists($var2_isBranch) and (xs:string(xs:boolean(fn:string($var2_isBranch))) = 'true'))">
				<slicing>
					<xsl:sequence select="($var12_create_slicing/@node(), $var12_create_slicing/node())"/>
				</slicing>
			</xsl:if>
			<xsl:if test="$var4_resultof_exists">
				<xsl:variable name="var13_result" as="xs:string">
					<xsl:choose>
						<xsl:when test="fn:exists($parentContext)">
							<xsl:sequence select="$parentContext"/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:sequence select="''"/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:variable name="var14_resultof_createDefinition" as="node()?">
					<xsl:call-template name="user:createDefinition">
						<xsl:with-param name="Constraint" as="node()">
							<Constraint xmlns="http://www.lantanagroup.com">
								<xsl:sequence select="($Constraint/@node(), $Constraint/node())"/>
							</Constraint>
						</xsl:with-param>
						<xsl:with-param name="contextPath" select="fn:concat($var13_result, fn:string($var3_context))" as="xs:string"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:for-each select="$var14_resultof_createDefinition">
					<definition>
						<xsl:sequence select="(./@node(), ./node())"/>
					</definition>
				</xsl:for-each>
			</xsl:if>
		</element>
		<xsl:if test="$var4_resultof_exists">
			<xsl:for-each select="$var1_Constraint">
				<xsl:variable name="var15_result" as="xs:string">
					<xsl:choose>
						<xsl:when test="fn:exists($parentContext)">
							<xsl:sequence select="$parentContext"/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:sequence select="''"/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:variable name="var16_resultof_flattenConstraints" as="node()*">
					<xsl:call-template name="user:flattenConstraints">
						<xsl:with-param name="parentContext" select="fn:concat(fn:concat($var15_result, fn:string($var3_context)), '/')" as="xs:string"/>
						<xsl:with-param name="Constraint" as="node()">
							<Constraint xmlns="http://www.lantanagroup.com">
								<xsl:sequence select="(./@node(), ./node())"/>
							</Constraint>
						</xsl:with-param>
						<xsl:with-param name="sliceName" as="xs:string?">
							<xsl:choose>
								<xsl:when test="$var5_val">
									<xsl:sequence select="fn:concat('slice-', generate-id($Constraint))"/>
								</xsl:when>
								<xsl:otherwise>
									<xsl:if test="fn:exists($sliceName)">
										<xsl:sequence select="$sliceName"/>
									</xsl:if>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:with-param>
					</xsl:call-template>
				</xsl:variable>
				<xsl:for-each select="$var16_resultof_flattenConstraints">
					<element xmlns="http://hl7.org/fhir" xmlns:osr="http://a9.com/-/opensearch/extensions/relevance/1.0/" xmlns:os="http://a9.com/-/spec/opensearch/1.1/" xmlns:at="http://purl.org/atompub/tombstones/1.0" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:atom="http://www.w3.org/2005/Atom">
						<xsl:sequence select="@node()"/>
						<xsl:sequence select="node()"/>
					</element>
				</xsl:for-each>
			</xsl:for-each>
		</xsl:if>
	</xsl:template>
	<xsl:template name="agt:addExtensions_var1_function">
		<xsl:param name="par0" as="node()"/>
		<extension xmlns="http://hl7.org/fhir" xmlns:osr="http://a9.com/-/opensearch/extensions/relevance/1.0/" xmlns:os="http://a9.com/-/spec/opensearch/1.1/" xmlns:at="http://purl.org/atompub/tombstones/1.0" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:atom="http://www.w3.org/2005/Atom">
			<xsl:if test="fn:exists($par0/@url)">
				<xsl:attribute name="url" namespace="" select="xs:string(xs:anyURI(fn:string($par0/@url)))"/>
			</xsl:if>
			<valueString>
				<xsl:for-each select="($par0/fhir:valueString)[fn:exists(@value)]">
					<xsl:attribute name="value" namespace="" select="fn:string(@value)"/>
				</xsl:for-each>
			</valueString>
		</extension>
	</xsl:template>
	<xsl:template name="agt:addExtensions_var3_function">
		<xsl:param name="par0" as="node()"/>
		<extension xmlns="http://hl7.org/fhir" xmlns:osr="http://a9.com/-/opensearch/extensions/relevance/1.0/" xmlns:os="http://a9.com/-/spec/opensearch/1.1/" xmlns:at="http://purl.org/atompub/tombstones/1.0" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:atom="http://www.w3.org/2005/Atom">
			<xsl:sequence select="$par0/@node()"/>
			<xsl:sequence select="$par0/node()"/>
		</extension>
	</xsl:template>
	<xsl:template name="user:addExtensions">
		<xsl:param name="ImplementationGuideName" select="()"/>
		<xsl:param name="impliedTemplateOid" select="()"/>
		<xsl:variable name="var2_let" as="node()?">
			<xsl:if test="fn:exists($ImplementationGuideName)">
				<extension xmlns="http://hl7.org/fhir" xmlns:osr="http://a9.com/-/opensearch/extensions/relevance/1.0/" xmlns:os="http://a9.com/-/spec/opensearch/1.1/" xmlns:at="http://purl.org/atompub/tombstones/1.0" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:atom="http://www.w3.org/2005/Atom">
					<xsl:attribute name="url" namespace="" select="xs:string(xs:anyURI('urn:lantanagroup.com/fhirExtension/implementationGuideName'))"/>
					<valueString>
						<xsl:attribute name="value" namespace="" select="$ImplementationGuideName"/>
					</valueString>
				</extension>
			</xsl:if>
		</xsl:variable>
		<xsl:for-each select="$var2_let">
			<xsl:call-template name="agt:addExtensions_var1_function">
				<xsl:with-param name="par0" select="." as="node()"/>
			</xsl:call-template>
		</xsl:for-each>
		<xsl:variable name="var4_let" as="node()?">
			<xsl:if test="fn:exists($impliedTemplateOid)">
				<extension xmlns="http://hl7.org/fhir" xmlns:osr="http://a9.com/-/opensearch/extensions/relevance/1.0/" xmlns:os="http://a9.com/-/spec/opensearch/1.1/" xmlns:at="http://purl.org/atompub/tombstones/1.0" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:atom="http://www.w3.org/2005/Atom">
					<xsl:attribute name="url" namespace="" select="xs:string(xs:anyURI('http://camara.lantanagroup.com/fhir/Profile/ImpliedProfileId'))"/>
					<valueUri>
						<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI($impliedTemplateOid))"/>
					</valueUri>
				</extension>
			</xsl:if>
		</xsl:variable>
		<xsl:for-each select="$var4_let">
			<xsl:call-template name="agt:addExtensions_var3_function">
				<xsl:with-param name="par0" select="." as="node()"/>
			</xsl:call-template>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="agt:constraintToListItem_var1_function">
		<xsl:param name="par0" as="node()"/>
		<ol xmlns="http://www.w3.org/1999/xhtml">
			<xsl:sequence select="($par0/@node(), $par0/node())"/>
		</ol>
	</xsl:template>
	<xsl:template name="user:constraintToListItem">
		<xsl:param name="ConstraintType" select="()"/>
		<xsl:for-each select="$ConstraintType">
			<li xmlns="http://www.w3.org/1999/xhtml" xmlns:osr="http://a9.com/-/opensearch/extensions/relevance/1.0/" xmlns:os="http://a9.com/-/spec/opensearch/1.1/" xmlns:fhir="http://hl7.org/fhir" xmlns:at="http://purl.org/atompub/tombstones/1.0" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:atom="http://www.w3.org/2005/Atom">
				<xsl:for-each select="ns0:NarrativeText">
					<p>
						<xsl:sequence select="fn:string(.)"/>
					</p>
				</xsl:for-each>
				<xsl:variable name="var3_resultof_map" as="node()*">
					<xsl:for-each select="ns0:Constraint">
						<ol xmlns:osr="http://a9.com/-/opensearch/extensions/relevance/1.0/" xmlns:os="http://a9.com/-/spec/opensearch/1.1/" xmlns:fhir="http://hl7.org/fhir" xmlns:at="http://purl.org/atompub/tombstones/1.0" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:atom="http://www.w3.org/2005/Atom">
							<xsl:variable name="var2_resultof_constraintToListItem" as="node()*">
								<xsl:call-template name="user:constraintToListItem">
									<xsl:with-param name="ConstraintType" as="node()">
										<ConstraintType xmlns="http://www.lantanagroup.com">
											<xsl:sequence select="(./@node(), ./node())"/>
										</ConstraintType>
									</xsl:with-param>
								</xsl:call-template>
							</xsl:variable>
							<xsl:for-each select="$var2_resultof_constraintToListItem">
								<li>
									<xsl:sequence select="(./@node(), ./node())"/>
								</li>
							</xsl:for-each>
						</ol>
					</xsl:for-each>
				</xsl:variable>
				<xsl:for-each select="$var3_resultof_map">
					<xsl:call-template name="agt:constraintToListItem_var1_function">
						<xsl:with-param name="par0" select="." as="node()"/>
					</xsl:call-template>
				</xsl:for-each>
			</li>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="user:createProfile">
		<xsl:param name="Template" select="()"/>
		<xsl:variable name="var1_context" as="node()?" select="$Template/@context"/>
		<xsl:variable name="var2_templateType" as="node()?" select="$Template/@templateType"/>
		<xsl:variable name="var3_publishStatus" as="node()?" select="$Template/@publishStatus"/>
		<xsl:variable name="var4_organizationName" as="node()?" select="$Template/@organizationName"/>
		<xsl:variable name="var5_identifier" as="node()?" select="$Template/@identifier"/>
		<xsl:variable name="var6_Constraint" as="node()*" select="$Template/ns0:Constraint"/>
		<xsl:variable name="var7_owningImplementationGuideName" as="node()?" select="$Template/@owningImplementationGuideName"/>
		<xsl:variable name="var8_impliedTemplateOid" as="node()?" select="$Template/@impliedTemplateOid"/>
		<xsl:variable name="var9_title" as="node()?" select="$Template/@title"/>
		<xsl:variable name="var10_resultof_exists" as="xs:boolean" select="fn:exists($var9_title)"/>
		<Profile xmlns="http://hl7.org/fhir" xmlns:osr="http://a9.com/-/opensearch/extensions/relevance/1.0/" xmlns:os="http://a9.com/-/spec/opensearch/1.1/" xmlns:at="http://purl.org/atompub/tombstones/1.0" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:atom="http://www.w3.org/2005/Atom">
			<xsl:variable name="var11_resultof_addExtensions" as="node()*">
				<xsl:call-template name="user:addExtensions">
					<xsl:with-param name="ImplementationGuideName" as="xs:string?">
						<xsl:if test="fn:exists($var7_owningImplementationGuideName)">
							<xsl:sequence select="fn:string($var7_owningImplementationGuideName)"/>
						</xsl:if>
					</xsl:with-param>
					<xsl:with-param name="impliedTemplateOid" as="xs:string?">
						<xsl:if test="fn:exists($var8_impliedTemplateOid)">
							<xsl:sequence select="fn:string($var8_impliedTemplateOid)"/>
						</xsl:if>
					</xsl:with-param>
				</xsl:call-template>
			</xsl:variable>
			<xsl:for-each select="$var11_resultof_addExtensions">
				<extension>
					<xsl:sequence select="(./@node(), ./node())"/>
				</extension>
			</xsl:for-each>
			<text>
				<status>
					<xsl:attribute name="value" namespace="" select="'generated'"/>
				</status>
				<xhtml:div>
					<xsl:if test="$var10_resultof_exists">
						<xhtml:p>
							<xsl:sequence select="fn:string($var9_title)"/>
						</xhtml:p>
					</xsl:if>
					<xsl:variable name="var13_create_ol" as="node()">
						<ol xmlns="http://www.w3.org/1999/xhtml" xmlns:osr="http://a9.com/-/opensearch/extensions/relevance/1.0/" xmlns:os="http://a9.com/-/spec/opensearch/1.1/" xmlns:fhir="http://hl7.org/fhir" xmlns:at="http://purl.org/atompub/tombstones/1.0" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:atom="http://www.w3.org/2005/Atom">
							<xsl:variable name="var12_resultof_constraintToListItem" as="node()*">
								<xsl:call-template name="user:constraintToListItem">
									<xsl:with-param name="ConstraintType" as="node()*">
										<xsl:for-each select="$var6_Constraint">
											<ConstraintType xmlns="http://www.lantanagroup.com">
												<xsl:sequence select="(./@node(), ./node())"/>
											</ConstraintType>
										</xsl:for-each>
									</xsl:with-param>
								</xsl:call-template>
							</xsl:variable>
							<xsl:for-each select="$var12_resultof_constraintToListItem">
								<li>
									<xsl:sequence select="(./@node(), ./node())"/>
								</li>
							</xsl:for-each>
						</ol>
					</xsl:variable>
					<xsl:if test="fn:exists($var13_create_ol/xhtml:li)">
						<xhtml:ol>
							<xsl:sequence select="($var13_create_ol/@node(), $var13_create_ol/node())"/>
						</xhtml:ol>
					</xsl:if>
				</xhtml:div>
			</text>
			<identifier>
				<xsl:if test="fn:exists($var5_identifier)">
					<xsl:attribute name="value" namespace="" select="fn:string($var5_identifier)"/>
				</xsl:if>
			</identifier>
			<name>
				<xsl:if test="$var10_resultof_exists">
					<xsl:attribute name="value" namespace="" select="fn:string($var9_title)"/>
				</xsl:if>
			</name>
			<publisher>
				<xsl:if test="fn:exists($var4_organizationName)">
					<xsl:attribute name="value" namespace="" select="fn:string($var4_organizationName)"/>
				</xsl:if>
			</publisher>
			<description>
				<xsl:for-each select="$Template/ns0:Description">
					<xsl:attribute name="value" namespace="" select="fn:string(.)"/>
				</xsl:for-each>
			</description>
			<status>
				<xsl:attribute name="value" namespace="">
					<xsl:choose>
						<xsl:when test="fn:exists($var3_publishStatus)">
							<xsl:call-template name="vmf:vmf3_inputtoresult">
								<xsl:with-param name="input" select="fn:string($var3_publishStatus)" as="xs:string"/>
							</xsl:call-template>
						</xsl:when>
						<xsl:otherwise>
							<xsl:sequence select="'draft'"/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:attribute>
			</status>
			<fhirVersion>
				<xsl:attribute name="value" namespace="" select="'0.8'"/>
			</fhirVersion>
			<structure>
				<type>
					<xsl:if test="fn:exists($var2_templateType)">
						<xsl:attribute name="value" namespace="" select="fn:string($var2_templateType)"/>
					</xsl:if>
				</type>
				<xsl:if test="fn:exists($var1_context)">
					<xsl:for-each select="$var6_Constraint">
						<xsl:variable name="var14_resultof_flattenConstraints" as="node()*">
							<xsl:call-template name="user:flattenConstraints">
								<xsl:with-param name="parentContext" select="fn:concat(fn:string($var1_context), '/')" as="xs:string"/>
								<xsl:with-param name="Constraint" as="node()">
									<Constraint xmlns="http://www.lantanagroup.com">
										<xsl:sequence select="(./@node(), ./node())"/>
									</Constraint>
								</xsl:with-param>
							</xsl:call-template>
						</xsl:variable>
						<xsl:for-each select="$var14_resultof_flattenConstraints">
							<element>
								<xsl:sequence select="(./@node(), ./node())"/>
							</element>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:if>
			</structure>
		</Profile>
	</xsl:template>
	<xsl:template name="vmf:vmf1_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='false'">
				<xsl:value-of select="'true'"/>
			</xsl:when>
			<xsl:when test="$input='true'">
				<xsl:value-of select="'false'"/>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:vmf2_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='SHOULD'">
				<xsl:value-of select="'warning'"/>
			</xsl:when>
			<xsl:when test="$input='MAY'">
				<xsl:value-of select="'warning'"/>
			</xsl:when>
			<xsl:when test="$input='SHALL'">
				<xsl:value-of select="'error'"/>
			</xsl:when>
			<xsl:when test="$input='SHALL NOT'">
				<xsl:value-of select="'error'"/>
			</xsl:when>
			<xsl:when test="$input='SHOULD NOT'">
				<xsl:value-of select="'warning'"/>
			</xsl:when>
			<xsl:when test="$input='MAY NOT'">
				<xsl:value-of select="'warning'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="'error'"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:vmf3_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='Draft'">
				<xsl:value-of select="'draft'"/>
			</xsl:when>
			<xsl:when test="$input='Published'">
				<xsl:value-of select="'active'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="'draft'"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:output method="xml" encoding="UTF-8" byte-order-mark="no" indent="yes"/>
	<xsl:template match="/">
		<atom:feed xmlns:atom="http://www.w3.org/2005/Atom" xmlns:osr="http://a9.com/-/opensearch/extensions/relevance/1.0/" xmlns:os="http://a9.com/-/spec/opensearch/1.1/" xmlns:fhir="http://hl7.org/fhir" xmlns:at="http://purl.org/atompub/tombstones/1.0" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
			<xsl:attribute name="xsi:schemaLocation" namespace="http://www.w3.org/2001/XMLSchema-instance" select="'http://www.w3.org/2005/Atom C:/Users/Sean/Documents/Lantana/Code/TRIF/Trifolia.Generation/XML/fhir-all-xsd/fhir-atom-single.xsd'"/>
			<xsl:for-each select="ns0:TemplateExport">
				<xsl:variable name="var1_resultof_cast" as="xs:string" select="xs:string(fn:current-dateTime())"/>
				<atom:title>Trifolia Profile Export</atom:title>
				<atom:updated>
					<xsl:sequence select="$var1_resultof_cast"/>
				</atom:updated>
				<atom:id>
					<xsl:sequence select="xs:string(xs:anyURI(fn:concat('cid:', generate-id(.))))"/>
				</atom:id>
				<xsl:for-each select="ns0:Template">
					<atom:entry>
						<atom:title>
							<xsl:sequence select="fn:string(@title)"/>
						</atom:title>
						<atom:id>
							<xsl:sequence select="xs:string(xs:anyURI(fn:string(@identifier)))"/>
						</atom:id>
						<atom:updated>
							<xsl:sequence select="$var1_resultof_cast"/>
						</atom:updated>
						<atom:content>
							<xsl:attribute name="type" select="'text/xml'"/>
							<xsl:variable name="var2_resultof_createProfile" as="node()?">
								<xsl:call-template name="user:createProfile">
									<xsl:with-param name="Template" as="node()">
										<Template xmlns="http://www.lantanagroup.com">
											<xsl:sequence select="(./@node(), ./node())"/>
										</Template>
									</xsl:with-param>
								</xsl:call-template>
							</xsl:variable>
							<xsl:for-each select="$var2_resultof_createProfile">
								<fhir:Profile>
									<xsl:sequence select="(./@node(), ./node())"/>
								</fhir:Profile>
							</xsl:for-each>
						</atom:content>
					</atom:entry>
				</xsl:for-each>
			</xsl:for-each>
		</atom:feed>
	</xsl:template>
</xsl:stylesheet>
